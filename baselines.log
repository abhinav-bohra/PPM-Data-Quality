--Baselines Logging--
--MPPN Logging--
bytecode dump:
>          0	NOP(arg=None, lineno=17)
           2	LOAD_GLOBAL(arg=0, lineno=17)
           4	LOAD_METHOD(arg=1, lineno=17)
           6	LOAD_FAST(arg=2, lineno=17)
           8	LOAD_FAST(arg=3, lineno=17)
          10	LOAD_FAST(arg=3, lineno=17)
          12	BUILD_TUPLE(arg=3, lineno=17)
          14	CALL_METHOD(arg=1, lineno=17)
          16	STORE_FAST(arg=4, lineno=17)
          18	SETUP_LOOP(arg=60, lineno=18)
          20	LOAD_GLOBAL(arg=2, lineno=18)
          22	LOAD_FAST(arg=2, lineno=18)
          24	CALL_FUNCTION(arg=1, lineno=18)
          26	GET_ITER(arg=None, lineno=18)
>         28	FOR_ITER(arg=48, lineno=18)
          30	STORE_FAST(arg=5, lineno=18)
          32	LOAD_GLOBAL(arg=0, lineno=19)
          34	LOAD_METHOD(arg=3, lineno=19)
          36	LOAD_FAST(arg=0, lineno=19)
          38	LOAD_FAST(arg=5, lineno=19)
          40	BINARY_SUBSCR(arg=None, lineno=19)
          42	LOAD_FAST(arg=0, lineno=19)
          44	LOAD_FAST(arg=5, lineno=19)
          46	BINARY_SUBSCR(arg=None, lineno=19)
          48	CALL_METHOD(arg=2, lineno=19)
          50	LOAD_GLOBAL(arg=0, lineno=19)
          52	LOAD_METHOD(arg=3, lineno=19)
          54	LOAD_FAST(arg=1, lineno=19)
          56	LOAD_FAST(arg=5, lineno=19)
          58	BINARY_SUBSCR(arg=None, lineno=19)
          60	LOAD_FAST(arg=1, lineno=19)
          62	LOAD_FAST(arg=5, lineno=19)
          64	BINARY_SUBSCR(arg=None, lineno=19)
          66	CALL_METHOD(arg=2, lineno=19)
          68	BINARY_SUBTRACT(arg=None, lineno=19)
          70	LOAD_FAST(arg=4, lineno=19)
          72	LOAD_FAST(arg=5, lineno=19)
          74	STORE_SUBSCR(arg=None, lineno=19)
          76	JUMP_ABSOLUTE(arg=28, lineno=19)
>         78	POP_BLOCK(arg=None, lineno=19)
>         80	LOAD_FAST(arg=4, lineno=20)
          82	RETURN_VALUE(arg=None, lineno=20)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=17)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=17)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=17)
stack ['$2load_global.0']
dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=17)
stack ['$4load_method.1']
dispatch pc=8, inst=LOAD_FAST(arg=3, lineno=17)
stack ['$4load_method.1', '$n_samples6.2']
dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=17)
stack ['$4load_method.1', '$n_samples6.2', '$image_size8.3']
dispatch pc=12, inst=BUILD_TUPLE(arg=3, lineno=17)
stack ['$4load_method.1', '$n_samples6.2', '$image_size8.3', '$image_size10.4']
dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=17)
stack ['$4load_method.1', '$12build_tuple.5']
dispatch pc=16, inst=STORE_FAST(arg=4, lineno=17)
stack ['$14call_method.6']
end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=18 nstack_initial=0)])
stack: []
dispatch pc=18, inst=SETUP_LOOP(arg=60, lineno=18)
stack []
dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=18)
stack []
dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=18)
stack ['$20load_global.0']
dispatch pc=24, inst=CALL_FUNCTION(arg=1, lineno=18)
stack ['$20load_global.0', '$n_samples22.1']
dispatch pc=26, inst=GET_ITER(arg=None, lineno=18)
stack ['$24call_function.2']
end state. edges=[Edge(pc=28, stack=('$26get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=28 nstack_initial=1)])
stack: ['$phi28.0']
dispatch pc=28, inst=FOR_ITER(arg=48, lineno=18)
stack ['$phi28.0']
end state. edges=[Edge(pc=78, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=30, stack=('$phi28.0', '$28for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=30 nstack_initial=2)])
stack: []
dispatch pc=78, inst=POP_BLOCK(arg=None, lineno=19)
stack []
end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=80 nstack_initial=0)])
stack: ['$phi30.0', '$phi30.1']
dispatch pc=30, inst=STORE_FAST(arg=5, lineno=18)
stack ['$phi30.0', '$phi30.1']
dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=19)
stack ['$phi30.0']
dispatch pc=34, inst=LOAD_METHOD(arg=3, lineno=19)
stack ['$phi30.0', '$32load_global.2']
dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=19)
stack ['$phi30.0', '$34load_method.3']
dispatch pc=38, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$X_cos36.4']
dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$X_cos36.4', '$i38.5']
dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6']
dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6', '$X_cos42.7']
dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6', '$X_cos42.7', '$i44.8']
dispatch pc=48, inst=CALL_METHOD(arg=2, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6', '$46binary_subscr.9']
dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=19)
stack ['$phi30.0', '$48call_method.10']
dispatch pc=52, inst=LOAD_METHOD(arg=3, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$50load_global.11']
dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12']
dispatch pc=56, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$X_sin54.13']
dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$X_sin54.13', '$i56.14']
dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15']
dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15', '$X_sin60.16']
dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15', '$X_sin60.16', '$i62.17']
dispatch pc=66, inst=CALL_METHOD(arg=2, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15', '$64binary_subscr.18']
dispatch pc=68, inst=BINARY_SUBTRACT(arg=None, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$66call_method.19']
dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=19)
stack ['$phi30.0', '$68binary_subtract.20']
dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$68binary_subtract.20', '$X_gasf70.21']
dispatch pc=74, inst=STORE_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$68binary_subtract.20', '$X_gasf70.21', '$i72.22']
dispatch pc=76, inst=JUMP_ABSOLUTE(arg=28, lineno=19)
stack ['$phi30.0']
end state. edges=[Edge(pc=28, stack=('$phi30.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=28 nstack_initial=1)])
stack: []
dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=20)
stack []
dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=20)
stack ['$X_gasf80.0']
end state. edges=[]
pending: deque([State(pc_initial=28 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=1): {'$phi28.0'},
             State(pc_initial=30 nstack_initial=2): {'$phi30.1'},
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set()})
defmap: {'$phi28.0': State(pc_initial=18 nstack_initial=0),
 '$phi30.1': State(pc_initial=28 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=2))},
             '$phi30.0': {('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
keep phismap: {'$phi28.0': {('$26get_iter.3', State(pc_initial=18 nstack_initial=0))},
 '$phi30.1': {('$28for_iter.2', State(pc_initial=28 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=18 nstack_initial=0): {'$phi28.0': '$26get_iter.3'},
             State(pc_initial=28 nstack_initial=1): {'$phi30.1': '$28for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$n_samples6.2'}), (8, {'res': '$image_size8.3'}), (10, {'res': '$image_size10.4'}), (12, {'items': ['$n_samples6.2', '$image_size8.3', '$image_size10.4'], 'res': '$12build_tuple.5'}), (14, {'func': '$4load_method.1', 'args': ['$12build_tuple.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ()})
block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'res': '$n_samples22.1'}), (24, {'func': '$20load_global.0', 'args': ['$n_samples22.1'], 'res': '$24call_function.2'}), (26, {'value': '$24call_function.2', 'res': '$26get_iter.3'})), outgoing_phis={'$phi28.0': '$26get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$26get_iter.3',)})
block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'iterator': '$phi28.0', 'pair': '$28for_iter.1', 'indval': '$28for_iter.2', 'pred': '$28for_iter.3'}),), outgoing_phis={'$phi30.1': '$28for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={78: (), 30: ('$phi28.0', '$28for_iter.2')})
block_infos State(pc_initial=30 nstack_initial=2):
AdaptBlockInfo(insts=((30, {'value': '$phi30.1'}), (32, {'res': '$32load_global.2'}), (34, {'item': '$32load_global.2', 'res': '$34load_method.3'}), (36, {'res': '$X_cos36.4'}), (38, {'res': '$i38.5'}), (40, {'index': '$i38.5', 'target': '$X_cos36.4', 'res': '$40binary_subscr.6'}), (42, {'res': '$X_cos42.7'}), (44, {'res': '$i44.8'}), (46, {'index': '$i44.8', 'target': '$X_cos42.7', 'res': '$46binary_subscr.9'}), (48, {'func': '$34load_method.3', 'args': ['$40binary_subscr.6', '$46binary_subscr.9'], 'res': '$48call_method.10'}), (50, {'res': '$50load_global.11'}), (52, {'item': '$50load_global.11', 'res': '$52load_method.12'}), (54, {'res': '$X_sin54.13'}), (56, {'res': '$i56.14'}), (58, {'index': '$i56.14', 'target': '$X_sin54.13', 'res': '$58binary_subscr.15'}), (60, {'res': '$X_sin60.16'}), (62, {'res': '$i62.17'}), (64, {'index': '$i62.17', 'target': '$X_sin60.16', 'res': '$64binary_subscr.18'}), (66, {'func': '$52load_method.12', 'args': ['$58binary_subscr.15', '$64binary_subscr.18'], 'res': '$66call_method.19'}), (68, {'lhs': '$48call_method.10', 'rhs': '$66call_method.19', 'res': '$68binary_subtract.20'}), (70, {'res': '$X_gasf70.21'}), (72, {'res': '$i72.22'}), (74, {'target': '$X_gasf70.21', 'index': '$i72.22', 'value': '$68binary_subtract.20'}), (76, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ('$phi30.0',)})
block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={80: ()})
block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$X_gasf80.0'}), (82, {'retval': '$X_gasf80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    X_cos = arg(0, name=X_cos)               ['X_cos']
    X_sin = arg(1, name=X_sin)               ['X_sin']
    n_samples = arg(2, name=n_samples)       ['n_samples']
    image_size = arg(3, name=image_size)     ['image_size']
    $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $12build_tuple.5 = build_tuple(items=[Var(n_samples, gaf.py:17), Var(image_size, gaf.py:17), Var(image_size, gaf.py:17)]) ['$12build_tuple.5', 'image_size', 'image_size', 'n_samples']
    X_gasf = call $4load_method.1($12build_tuple.5, func=$4load_method.1, args=[Var($12build_tuple.5, gaf.py:17)], kws=(), vararg=None, target=None) ['$12build_tuple.5', '$4load_method.1', 'X_gasf']
    jump 18                                  []
label 18:
    $20load_global.0 = global(prange: <class 'numba.misc.special.prange'>) ['$20load_global.0']
    $24call_function.2 = call $20load_global.0(n_samples, func=$20load_global.0, args=[Var(n_samples, gaf.py:17)], kws=(), vararg=None, target=None) ['$20load_global.0', '$24call_function.2', 'n_samples']
    $26get_iter.3 = getiter(value=$24call_function.2) ['$24call_function.2', '$26get_iter.3']
    $phi28.0 = $26get_iter.3                 ['$26get_iter.3', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 78             ['$28for_iter.3']
label 30:
    i = $phi30.1                             ['$phi30.1', 'i']
    $32load_global.2 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$32load_global.2']
    $34load_method.3 = getattr(value=$32load_global.2, attr=outer) ['$32load_global.2', '$34load_method.3']
    $40binary_subscr.6 = getitem(value=X_cos, index=i, fn=<built-in function getitem>) ['$40binary_subscr.6', 'X_cos', 'i']
    $46binary_subscr.9 = getitem(value=X_cos, index=i, fn=<built-in function getitem>) ['$46binary_subscr.9', 'X_cos', 'i']
    $48call_method.10 = call $34load_method.3($40binary_subscr.6, $46binary_subscr.9, func=$34load_method.3, args=[Var($40binary_subscr.6, gaf.py:19), Var($46binary_subscr.9, gaf.py:19)], kws=(), vararg=None, target=None) ['$34load_method.3', '$40binary_subscr.6', '$46binary_subscr.9', '$48call_method.10']
    $50load_global.11 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$50load_global.11']
    $52load_method.12 = getattr(value=$50load_global.11, attr=outer) ['$50load_global.11', '$52load_method.12']
    $58binary_subscr.15 = getitem(value=X_sin, index=i, fn=<built-in function getitem>) ['$58binary_subscr.15', 'X_sin', 'i']
    $64binary_subscr.18 = getitem(value=X_sin, index=i, fn=<built-in function getitem>) ['$64binary_subscr.18', 'X_sin', 'i']
    $66call_method.19 = call $52load_method.12($58binary_subscr.15, $64binary_subscr.18, func=$52load_method.12, args=[Var($58binary_subscr.15, gaf.py:19), Var($64binary_subscr.18, gaf.py:19)], kws=(), vararg=None, target=None) ['$52load_method.12', '$58binary_subscr.15', '$64binary_subscr.18', '$66call_method.19']
    $68binary_subtract.20 = $48call_method.10 - $66call_method.19 ['$48call_method.10', '$66call_method.19', '$68binary_subtract.20']
    X_gasf[i] = $68binary_subtract.20        ['$68binary_subtract.20', 'X_gasf', 'i']
    jump 28                                  []
label 78:
    jump 80                                  []
label 80:
    $82return_value.1 = cast(value=X_gasf)   ['$82return_value.1', 'X_gasf']
    return $82return_value.1                 ['$82return_value.1']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa34502f890>
on stmt: X_cos = arg(0, name=X_cos)
on stmt: X_sin = arg(1, name=X_sin)
on stmt: n_samples = arg(2, name=n_samples)
on stmt: image_size = arg(3, name=image_size)
on stmt: $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
on stmt: $12build_tuple.5 = build_tuple(items=[Var(n_samples, gaf.py:17), Var(image_size, gaf.py:17), Var(image_size, gaf.py:17)])
on stmt: X_gasf = call $4load_method.1($12build_tuple.5, func=$4load_method.1, args=[Var($12build_tuple.5, gaf.py:17)], kws=(), vararg=None, target=None)
on stmt: jump 18
==== SSA block analysis pass on 18
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa34502f890>
on stmt: $20load_global.0 = global(prange: <class 'numba.misc.special.prange'>)
on stmt: $24call_function.2 = call $20load_global.0(n_samples, func=$20load_global.0, args=[Var(n_samples, gaf.py:17)], kws=(), vararg=None, target=None)
on stmt: $26get_iter.3 = getiter(value=$24call_function.2)
on stmt: $phi28.0 = $26get_iter.3
on stmt: jump 28
==== SSA block analysis pass on 28
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa34502f890>
on stmt: $28for_iter.1 = iternext(value=$phi28.0)
on stmt: $28for_iter.2 = pair_first(value=$28for_iter.1)
on stmt: $28for_iter.3 = pair_second(value=$28for_iter.1)
on stmt: $phi30.1 = $28for_iter.2
on stmt: branch $28for_iter.3, 30, 78
==== SSA block analysis pass on 30
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa34502f890>
on stmt: i = $phi30.1
on stmt: $32load_global.2 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $34load_method.3 = getattr(value=$32load_global.2, attr=outer)
on stmt: $40binary_subscr.6 = getitem(value=X_cos, index=i, fn=<built-in function getitem>)
on stmt: $46binary_subscr.9 = getitem(value=X_cos, index=i, fn=<built-in function getitem>)
on stmt: $48call_method.10 = call $34load_method.3($40binary_subscr.6, $46binary_subscr.9, func=$34load_method.3, args=[Var($40binary_subscr.6, gaf.py:19), Var($46binary_subscr.9, gaf.py:19)], kws=(), vararg=None, target=None)
on stmt: $50load_global.11 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $52load_method.12 = getattr(value=$50load_global.11, attr=outer)
on stmt: $58binary_subscr.15 = getitem(value=X_sin, index=i, fn=<built-in function getitem>)
on stmt: $64binary_subscr.18 = getitem(value=X_sin, index=i, fn=<built-in function getitem>)
on stmt: $66call_method.19 = call $52load_method.12($58binary_subscr.15, $64binary_subscr.18, func=$52load_method.12, args=[Var($58binary_subscr.15, gaf.py:19), Var($64binary_subscr.18, gaf.py:19)], kws=(), vararg=None, target=None)
on stmt: $68binary_subtract.20 = $48call_method.10 - $66call_method.19
on stmt: X_gasf[i] = $68binary_subtract.20
on stmt: jump 28
==== SSA block analysis pass on 78
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa34502f890>
on stmt: jump 80
==== SSA block analysis pass on 80
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa34502f890>
on stmt: $82return_value.1 = cast(value=X_gasf)
on stmt: return $82return_value.1
defs defaultdict(<class 'list'>,
            {'$12build_tuple.5': [<numba.core.ir.Assign object at 0x7fa345067bd0>],
             '$20load_global.0': [<numba.core.ir.Assign object at 0x7fa345067e90>],
             '$24call_function.2': [<numba.core.ir.Assign object at 0x7fa34500d0d0>],
             '$26get_iter.3': [<numba.core.ir.Assign object at 0x7fa34500d1d0>],
             '$28for_iter.1': [<numba.core.ir.Assign object at 0x7fa34500d450>],
             '$28for_iter.2': [<numba.core.ir.Assign object at 0x7fa34500d510>],
             '$28for_iter.3': [<numba.core.ir.Assign object at 0x7fa34500d5d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa345054c90>],
             '$32load_global.2': [<numba.core.ir.Assign object at 0x7fa34500d910>],
             '$34load_method.3': [<numba.core.ir.Assign object at 0x7fa34500da10>],
             '$40binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa34500dcd0>],
             '$46binary_subscr.9': [<numba.core.ir.Assign object at 0x7fa34500df50>],
             '$48call_method.10': [<numba.core.ir.Assign object at 0x7fa345011090>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa345054990>],
             '$50load_global.11': [<numba.core.ir.Assign object at 0x7fa345011150>],
             '$52load_method.12': [<numba.core.ir.Assign object at 0x7fa345011250>],
             '$58binary_subscr.15': [<numba.core.ir.Assign object at 0x7fa3450114d0>],
             '$64binary_subscr.18': [<numba.core.ir.Assign object at 0x7fa345011750>],
             '$66call_method.19': [<numba.core.ir.Assign object at 0x7fa345011890>],
             '$68binary_subtract.20': [<numba.core.ir.Assign object at 0x7fa345011950>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x7fa345011cd0>],
             '$phi28.0': [<numba.core.ir.Assign object at 0x7fa345061150>],
             '$phi30.1': [<numba.core.ir.Assign object at 0x7fa34500d650>],
             'X_cos': [<numba.core.ir.Assign object at 0x7fa345061b50>],
             'X_gasf': [<numba.core.ir.Assign object at 0x7fa345067d90>],
             'X_sin': [<numba.core.ir.Assign object at 0x7fa345061bd0>],
             'i': [<numba.core.ir.Assign object at 0x7fa34500d810>],
             'image_size': [<numba.core.ir.Assign object at 0x7fa345054e10>],
             'n_samples': [<numba.core.ir.Assign object at 0x7fa345054f50>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=3)
           2	LOAD_GLOBAL(arg=0, lineno=3)
           4	LOAD_FAST(arg=0, lineno=3)
           6	CALL_FUNCTION(arg=1, lineno=3)
           8	RETURN_VALUE(arg=None, lineno=3)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=3)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=3)
stack ['$2load_global.0']
dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=3)
stack ['$2load_global.0', '$tmp04.1']
dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=3)
stack ['$6call_function.2']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$tmp04.1'}), (6, {'func': '$2load_global.0', 'args': ['$tmp04.1'], 'res': '$6call_function.2'}), (8, {'retval': '$6call_function.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    tmp0 = arg(0, name=tmp0)                 ['tmp0']
    $2load_global.0 = global(intrin: <intrinsic stub>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None) ['$2load_global.0', '$6call_function.2', 'tmp0']
    $8return_value.3 = cast(value=$6call_function.2) ['$6call_function.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f7ff50>
on stmt: tmp0 = arg(0, name=tmp0)
on stmt: $2load_global.0 = global(intrin: <intrinsic stub>)
on stmt: $6call_function.2 = call $2load_global.0(tmp0, func=$2load_global.0, args=[Var(tmp0, <string>:3)], kws=(), vararg=None, target=None)
on stmt: $8return_value.3 = cast(value=$6call_function.2)
on stmt: return $8return_value.3
defs defaultdict(<class 'list'>,
            {'$2load_global.0': [<numba.core.ir.Assign object at 0x7fa344f8ee10>],
             '$6call_function.2': [<numba.core.ir.Assign object at 0x7fa344f8a050>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa344f8a110>],
             'tmp0': [<numba.core.ir.Assign object at 0x7fa344f8ed10>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=3543)
           2	LOAD_FAST(arg=0, lineno=3543)
           4	LOAD_METHOD(arg=0, lineno=3543)
           6	LOAD_FAST(arg=1, lineno=3543)
           8	LOAD_FAST(arg=2, lineno=3543)
          10	CALL_METHOD(arg=2, lineno=3543)
          12	RETURN_VALUE(arg=None, lineno=3543)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=3543)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3543)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3543)
stack ['$arrtype2.0']
dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3543)
stack ['$4load_method.1']
dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3543)
stack ['$4load_method.1', '$size6.2']
dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3543)
stack ['$4load_method.1', '$size6.2', '$align8.3']
dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3543)
stack ['$10call_method.4']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    arrtype = arg(0, name=arrtype)           ['arrtype']
    size = arg(1, name=size)                 ['size']
    align = arg(2, name=align)               ['align']
    $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
    $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ee3250>
on stmt: arrtype = arg(0, name=arrtype)
on stmt: size = arg(1, name=size)
on stmt: align = arg(2, name=align)
on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3543), Var(align, arrayobj.py:3543)], kws=(), vararg=None, target=None)
on stmt: $12return_value.5 = cast(value=$10call_method.4)
on stmt: return $12return_value.5
defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fa344f71fd0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa344f760d0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa344f71c90>],
             'align': [<numba.core.ir.Assign object at 0x7fa344f71a50>],
             'arrtype': [<numba.core.ir.Assign object at 0x7fa344f71910>],
             'size': [<numba.core.ir.Assign object at 0x7fa344f71990>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=3536)
           2	LOAD_GLOBAL(arg=0, lineno=3536)
           4	LOAD_FAST(arg=1, lineno=3536)
           6	LOAD_FAST(arg=2, lineno=3536)
           8	CALL_FUNCTION(arg=2, lineno=3536)
          10	RETURN_VALUE(arg=None, lineno=3536)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=3536)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3536)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3536)
stack ['$2load_global.0']
dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3536)
stack ['$2load_global.0', '$allocsize4.1']
dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3536)
stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3536)
stack ['$8call_function.3']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    cls = arg(0, name=cls)                   ['cls']
    allocsize = arg(1, name=allocsize)       ['allocsize']
    align = arg(2, name=align)               ['align']
    $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ee8350>
on stmt: cls = arg(0, name=cls)
on stmt: allocsize = arg(1, name=allocsize)
on stmt: align = arg(2, name=align)
on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3536), Var(align, arrayobj.py:3536)], kws=(), vararg=None, target=None)
on stmt: $10return_value.4 = cast(value=$8call_function.3)
on stmt: return $10return_value.4
defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa344e7b490>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa344e7b0d0>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa344e7b3d0>],
             'align': [<numba.core.ir.Assign object at 0x7fa344ee8f50>],
             'allocsize': [<numba.core.ir.Assign object at 0x7fa344ee8e90>],
             'cls': [<numba.core.ir.Assign object at 0x7fa344ee8e10>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=2641)
           2	LOAD_DEREF(arg=0, lineno=2641)
           4	LOAD_FAST(arg=0, lineno=2641)
           6	LOAD_FAST(arg=1, lineno=2641)
           8	LOAD_FAST(arg=2, lineno=2641)
          10	CALL_FUNCTION(arg=3, lineno=2641)
          12	RETURN_VALUE(arg=None, lineno=2641)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=2641)
stack []
dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=2641)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2641)
stack ['$2load_deref.0']
dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2641)
stack ['$2load_deref.0', '$a4.1']
dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=2641)
stack ['$2load_deref.0', '$a4.1', '$b6.2']
dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=2641)
stack ['$2load_deref.0', '$a4.1', '$b6.2', '$out8.3']
dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2641)
stack ['$10call_function.4']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$b6.2'}), (8, {'res': '$out8.3'}), (10, {'func': '$2load_deref.0', 'args': ['$a4.1', '$b6.2', '$out8.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $2load_deref.0 = freevar(impl: <function outer_impl_none at 0x7fa34540c950>) ['$2load_deref.0']
    $10call_function.4 = call $2load_deref.0(a, b, out, func=$2load_deref.0, args=[Var(a, linalg.py:2641), Var(b, linalg.py:2641), Var(out, linalg.py:2641)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_deref.0', 'a', 'b', 'out']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f881d0>
on stmt: a = arg(0, name=a)
on stmt: b = arg(1, name=b)
on stmt: out = arg(2, name=out)
on stmt: $2load_deref.0 = freevar(impl: <function outer_impl_none at 0x7fa34540c950>)
on stmt: $10call_function.4 = call $2load_deref.0(a, b, out, func=$2load_deref.0, args=[Var(a, linalg.py:2641), Var(b, linalg.py:2641), Var(out, linalg.py:2641)], kws=(), vararg=None, target=None)
on stmt: $12return_value.5 = cast(value=$10call_function.4)
on stmt: return $12return_value.5
defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7fa344f65890>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa344f65e50>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fa344ee8810>],
             'a': [<numba.core.ir.Assign object at 0x7fa344ee8890>],
             'b': [<numba.core.ir.Assign object at 0x7fa344ee83d0>],
             'out': [<numba.core.ir.Assign object at 0x7fa344ee8710>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=2609)
           2	LOAD_GLOBAL(arg=0, lineno=2609)
           4	LOAD_METHOD(arg=1, lineno=2609)
           6	LOAD_FAST(arg=0, lineno=2609)
           8	CALL_METHOD(arg=1, lineno=2609)
          10	STORE_FAST(arg=3, lineno=2609)
          12	LOAD_GLOBAL(arg=0, lineno=2610)
          14	LOAD_METHOD(arg=1, lineno=2610)
          16	LOAD_FAST(arg=1, lineno=2610)
          18	CALL_METHOD(arg=1, lineno=2610)
          20	STORE_FAST(arg=4, lineno=2610)
          22	LOAD_GLOBAL(arg=0, lineno=2611)
          24	LOAD_METHOD(arg=2, lineno=2611)
          26	LOAD_FAST(arg=3, lineno=2611)
          28	LOAD_METHOD(arg=3, lineno=2611)
          30	CALL_METHOD(arg=0, lineno=2611)
          32	LOAD_METHOD(arg=4, lineno=2611)
          34	LOAD_FAST(arg=3, lineno=2611)
          36	LOAD_ATTR(arg=5, lineno=2611)
          38	LOAD_CONST(arg=1, lineno=2611)
          40	BUILD_TUPLE(arg=2, lineno=2611)
          42	CALL_METHOD(arg=1, lineno=2611)
          44	LOAD_FAST(arg=4, lineno=2612)
          46	LOAD_METHOD(arg=3, lineno=2612)
          48	CALL_METHOD(arg=0, lineno=2612)
          50	LOAD_METHOD(arg=4, lineno=2612)
          52	LOAD_CONST(arg=1, lineno=2612)
          54	LOAD_FAST(arg=4, lineno=2612)
          56	LOAD_ATTR(arg=5, lineno=2612)
          58	BUILD_TUPLE(arg=2, lineno=2612)
          60	CALL_METHOD(arg=1, lineno=2612)
          62	CALL_METHOD(arg=2, lineno=2612)
          64	RETURN_VALUE(arg=None, lineno=2612)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=2609)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2609)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2609)
stack ['$2load_global.0']
dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2609)
stack ['$4load_method.1']
dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2609)
stack ['$4load_method.1', '$a6.2']
dispatch pc=10, inst=STORE_FAST(arg=3, lineno=2609)
stack ['$8call_method.3']
dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2610)
stack []
dispatch pc=14, inst=LOAD_METHOD(arg=1, lineno=2610)
stack ['$12load_global.4']
dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=2610)
stack ['$14load_method.5']
dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2610)
stack ['$14load_method.5', '$b16.6']
dispatch pc=20, inst=STORE_FAST(arg=4, lineno=2610)
stack ['$18call_method.7']
dispatch pc=22, inst=LOAD_GLOBAL(arg=0, lineno=2611)
stack []
dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=2611)
stack ['$22load_global.8']
dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=2611)
stack ['$24load_method.9']
dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=2611)
stack ['$24load_method.9', '$aa26.10']
dispatch pc=30, inst=CALL_METHOD(arg=0, lineno=2611)
stack ['$24load_method.9', '$28load_method.11']
dispatch pc=32, inst=LOAD_METHOD(arg=4, lineno=2611)
stack ['$24load_method.9', '$30call_method.12']
dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=2611)
stack ['$24load_method.9', '$32load_method.13']
dispatch pc=36, inst=LOAD_ATTR(arg=5, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$aa34.14']
dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$36load_attr.15']
dispatch pc=40, inst=BUILD_TUPLE(arg=2, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$36load_attr.15', '$const38.16']
dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$40build_tuple.17']
dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=2612)
stack ['$24load_method.9', '$42call_method.18']
dispatch pc=46, inst=LOAD_METHOD(arg=3, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$bb44.19']
dispatch pc=48, inst=CALL_METHOD(arg=0, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$46load_method.20']
dispatch pc=50, inst=LOAD_METHOD(arg=4, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$48call_method.21']
dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22']
dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$const52.23']
dispatch pc=56, inst=LOAD_ATTR(arg=5, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$const52.23', '$bb54.24']
dispatch pc=58, inst=BUILD_TUPLE(arg=2, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$const52.23', '$56load_attr.25']
dispatch pc=60, inst=CALL_METHOD(arg=1, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$58build_tuple.26']
dispatch pc=62, inst=CALL_METHOD(arg=2, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$60call_method.27']
dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=2612)
stack ['$62call_method.28']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_method.5'}), (16, {'res': '$b16.6'}), (18, {'func': '$14load_method.5', 'args': ['$b16.6'], 'res': '$18call_method.7'}), (20, {'value': '$18call_method.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_method.9'}), (26, {'res': '$aa26.10'}), (28, {'item': '$aa26.10', 'res': '$28load_method.11'}), (30, {'func': '$28load_method.11', 'args': [], 'res': '$30call_method.12'}), (32, {'item': '$30call_method.12', 'res': '$32load_method.13'}), (34, {'res': '$aa34.14'}), (36, {'item': '$aa34.14', 'res': '$36load_attr.15'}), (38, {'res': '$const38.16'}), (40, {'items': ['$36load_attr.15', '$const38.16'], 'res': '$40build_tuple.17'}), (42, {'func': '$32load_method.13', 'args': ['$40build_tuple.17'], 'res': '$42call_method.18'}), (44, {'res': '$bb44.19'}), (46, {'item': '$bb44.19', 'res': '$46load_method.20'}), (48, {'func': '$46load_method.20', 'args': [], 'res': '$48call_method.21'}), (50, {'item': '$48call_method.21', 'res': '$50load_method.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$bb54.24'}), (56, {'item': '$bb54.24', 'res': '$56load_attr.25'}), (58, {'items': ['$const52.23', '$56load_attr.25'], 'res': '$58build_tuple.26'}), (60, {'func': '$50load_method.22', 'args': ['$58build_tuple.26'], 'res': '$60call_method.27'}), (62, {'func': '$24load_method.9', 'args': ['$42call_method.18', '$60call_method.27'], 'res': '$62call_method.28'}), (64, {'retval': '$62call_method.28', 'castval': '$64return_value.29'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    aa = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:2609)], kws=(), vararg=None, target=None) ['$4load_method.1', 'a', 'aa']
    $12load_global.4 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$12load_global.4']
    $14load_method.5 = getattr(value=$12load_global.4, attr=asarray) ['$12load_global.4', '$14load_method.5']
    bb = call $14load_method.5(b, func=$14load_method.5, args=[Var(b, linalg.py:2609)], kws=(), vararg=None, target=None) ['$14load_method.5', 'b', 'bb']
    $22load_global.8 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=multiply) ['$22load_global.8', '$24load_method.9']
    $28load_method.11 = getattr(value=aa, attr=ravel) ['$28load_method.11', 'aa']
    $30call_method.12 = call $28load_method.11(func=$28load_method.11, args=[], kws=(), vararg=None, target=None) ['$28load_method.11', '$30call_method.12']
    $32load_method.13 = getattr(value=$30call_method.12, attr=reshape) ['$30call_method.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=aa, attr=size) ['$36load_attr.15', 'aa']
    $const38.16 = const(int, 1)              ['$const38.16']
    $40build_tuple.17 = build_tuple(items=[Var($36load_attr.15, linalg.py:2611), Var($const38.16, linalg.py:2611)]) ['$36load_attr.15', '$40build_tuple.17', '$const38.16']
    $42call_method.18 = call $32load_method.13($40build_tuple.17, func=$32load_method.13, args=[Var($40build_tuple.17, linalg.py:2611)], kws=(), vararg=None, target=None) ['$32load_method.13', '$40build_tuple.17', '$42call_method.18']
    $46load_method.20 = getattr(value=bb, attr=ravel) ['$46load_method.20', 'bb']
    $48call_method.21 = call $46load_method.20(func=$46load_method.20, args=[], kws=(), vararg=None, target=None) ['$46load_method.20', '$48call_method.21']
    $50load_method.22 = getattr(value=$48call_method.21, attr=reshape) ['$48call_method.21', '$50load_method.22']
    $const52.23 = const(int, 1)              ['$const52.23']
    $56load_attr.25 = getattr(value=bb, attr=size) ['$56load_attr.25', 'bb']
    $58build_tuple.26 = build_tuple(items=[Var($const52.23, linalg.py:2612), Var($56load_attr.25, linalg.py:2612)]) ['$56load_attr.25', '$58build_tuple.26', '$const52.23']
    $60call_method.27 = call $50load_method.22($58build_tuple.26, func=$50load_method.22, args=[Var($58build_tuple.26, linalg.py:2612)], kws=(), vararg=None, target=None) ['$50load_method.22', '$58build_tuple.26', '$60call_method.27']
    $62call_method.28 = call $24load_method.9($42call_method.18, $60call_method.27, func=$24load_method.9, args=[Var($42call_method.18, linalg.py:2611), Var($60call_method.27, linalg.py:2612)], kws=(), vararg=None, target=None) ['$24load_method.9', '$42call_method.18', '$60call_method.27', '$62call_method.28']
    $64return_value.29 = cast(value=$62call_method.28) ['$62call_method.28', '$64return_value.29']
    return $64return_value.29                ['$64return_value.29']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344fbab10>
on stmt: a = arg(0, name=a)
on stmt: b = arg(1, name=b)
on stmt: out = arg(2, name=out)
on stmt: $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
on stmt: aa = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:2609)], kws=(), vararg=None, target=None)
on stmt: $12load_global.4 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $14load_method.5 = getattr(value=$12load_global.4, attr=asarray)
on stmt: bb = call $14load_method.5(b, func=$14load_method.5, args=[Var(b, linalg.py:2609)], kws=(), vararg=None, target=None)
on stmt: $22load_global.8 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=multiply)
on stmt: $28load_method.11 = getattr(value=aa, attr=ravel)
on stmt: $30call_method.12 = call $28load_method.11(func=$28load_method.11, args=[], kws=(), vararg=None, target=None)
on stmt: $32load_method.13 = getattr(value=$30call_method.12, attr=reshape)
on stmt: $36load_attr.15 = getattr(value=aa, attr=size)
on stmt: $const38.16 = const(int, 1)
on stmt: $40build_tuple.17 = build_tuple(items=[Var($36load_attr.15, linalg.py:2611), Var($const38.16, linalg.py:2611)])
on stmt: $42call_method.18 = call $32load_method.13($40build_tuple.17, func=$32load_method.13, args=[Var($40build_tuple.17, linalg.py:2611)], kws=(), vararg=None, target=None)
on stmt: $46load_method.20 = getattr(value=bb, attr=ravel)
on stmt: $48call_method.21 = call $46load_method.20(func=$46load_method.20, args=[], kws=(), vararg=None, target=None)
on stmt: $50load_method.22 = getattr(value=$48call_method.21, attr=reshape)
on stmt: $const52.23 = const(int, 1)
on stmt: $56load_attr.25 = getattr(value=bb, attr=size)
on stmt: $58build_tuple.26 = build_tuple(items=[Var($const52.23, linalg.py:2612), Var($56load_attr.25, linalg.py:2612)])
on stmt: $60call_method.27 = call $50load_method.22($58build_tuple.26, func=$50load_method.22, args=[Var($58build_tuple.26, linalg.py:2612)], kws=(), vararg=None, target=None)
on stmt: $62call_method.28 = call $24load_method.9($42call_method.18, $60call_method.27, func=$24load_method.9, args=[Var($42call_method.18, linalg.py:2611), Var($60call_method.27, linalg.py:2612)], kws=(), vararg=None, target=None)
on stmt: $64return_value.29 = cast(value=$62call_method.28)
on stmt: return $64return_value.29
defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x7fa344eafe50>],
             '$14load_method.5': [<numba.core.ir.Assign object at 0x7fa344f88050>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x7fa344e998d0>],
             '$24load_method.9': [<numba.core.ir.Assign object at 0x7fa344e99a90>],
             '$28load_method.11': [<numba.core.ir.Assign object at 0x7fa344e99d50>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa344dff150>],
             '$30call_method.12': [<numba.core.ir.Assign object at 0x7fa344e999d0>],
             '$32load_method.13': [<numba.core.ir.Assign object at 0x7fa344e99d90>],
             '$36load_attr.15': [<numba.core.ir.Assign object at 0x7fa344eb4350>],
             '$40build_tuple.17': [<numba.core.ir.Assign object at 0x7fa344eb4b10>],
             '$42call_method.18': [<numba.core.ir.Assign object at 0x7fa344eb4390>],
             '$46load_method.20': [<numba.core.ir.Assign object at 0x7fa344eb4c90>],
             '$48call_method.21': [<numba.core.ir.Assign object at 0x7fa344eb4ed0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa344dffcd0>],
             '$50load_method.22': [<numba.core.ir.Assign object at 0x7fa344eb4e90>],
             '$56load_attr.25': [<numba.core.ir.Assign object at 0x7fa344eb4e10>],
             '$58build_tuple.26': [<numba.core.ir.Assign object at 0x7fa344eb42d0>],
             '$60call_method.27': [<numba.core.ir.Assign object at 0x7fa344eb4bd0>],
             '$62call_method.28': [<numba.core.ir.Assign object at 0x7fa344eb49d0>],
             '$64return_value.29': [<numba.core.ir.Assign object at 0x7fa344eb48d0>],
             '$const38.16': [<numba.core.ir.Assign object at 0x7fa344eb4650>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fa344eb4f10>],
             'a': [<numba.core.ir.Assign object at 0x7fa344f8eed0>],
             'aa': [<numba.core.ir.Assign object at 0x7fa344f76210>],
             'b': [<numba.core.ir.Assign object at 0x7fa344dff7d0>],
             'bb': [<numba.core.ir.Assign object at 0x7fa344e99290>],
             'out': [<numba.core.ir.Assign object at 0x7fa344dff990>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=4208)
           2	LOAD_FAST(arg=0, lineno=4208)
           4	RETURN_VALUE(arg=None, lineno=4208)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=4208)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4208)
stack []
dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4208)
stack ['$a2.0']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344e51d90>
on stmt: a = arg(0, name=a)
on stmt: dtype = arg(1, name=dtype)
on stmt: $4return_value.1 = cast(value=a)
on stmt: return $4return_value.1
defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fa344fb1750>],
             'a': [<numba.core.ir.Assign object at 0x7fa344e51350>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa344fb1950>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=1772)
           2	LOAD_FAST(arg=0, lineno=1772)
           4	LOAD_METHOD(arg=0, lineno=1772)
           6	CALL_METHOD(arg=0, lineno=1772)
           8	RETURN_VALUE(arg=None, lineno=1772)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=1772)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1772)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1772)
stack ['$ary2.0']
dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=1772)
stack ['$4load_method.1']
dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=1772)
stack ['$6call_method.2']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'retval': '$6call_method.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=flatten) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', '$6call_method.2']
    $8return_value.3 = cast(value=$6call_method.2) ['$6call_method.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344dc75d0>
on stmt: ary = arg(0, name=ary)
on stmt: $4load_method.1 = getattr(value=ary, attr=flatten)
on stmt: $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
on stmt: $8return_value.3 = cast(value=$6call_method.2)
on stmt: return $8return_value.3
defs defaultdict(<class 'list'>,
            {'$4load_method.1': [<numba.core.ir.Assign object at 0x7fa344dbecd0>],
             '$6call_method.2': [<numba.core.ir.Assign object at 0x7fa344dbee50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa344dbef10>],
             'ary': [<numba.core.ir.Assign object at 0x7fa344dbea10>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=1798)
           2	LOAD_FAST(arg=0, lineno=1798)
           4	LOAD_METHOD(arg=0, lineno=1798)
           6	CALL_METHOD(arg=0, lineno=1798)
           8	LOAD_METHOD(arg=1, lineno=1798)
          10	LOAD_FAST(arg=0, lineno=1798)
          12	LOAD_ATTR(arg=2, lineno=1798)
          14	CALL_METHOD(arg=1, lineno=1798)
          16	RETURN_VALUE(arg=None, lineno=1798)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=1798)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1798)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1798)
stack ['$ary2.0']
dispatch pc=6, inst=CALL_METHOD(arg=0, lineno=1798)
stack ['$4load_method.1']
dispatch pc=8, inst=LOAD_METHOD(arg=1, lineno=1798)
stack ['$6call_method.2']
dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=1798)
stack ['$8load_method.3']
dispatch pc=12, inst=LOAD_ATTR(arg=2, lineno=1798)
stack ['$8load_method.3', '$ary10.4']
dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=1798)
stack ['$8load_method.3', '$12load_attr.5']
dispatch pc=16, inst=RETURN_VALUE(arg=None, lineno=1798)
stack ['$14call_method.6']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'func': '$4load_method.1', 'args': [], 'res': '$6call_method.2'}), (8, {'item': '$6call_method.2', 'res': '$8load_method.3'}), (10, {'res': '$ary10.4'}), (12, {'item': '$ary10.4', 'res': '$12load_attr.5'}), (14, {'func': '$8load_method.3', 'args': ['$12load_attr.5'], 'res': '$14call_method.6'}), (16, {'retval': '$14call_method.6', 'castval': '$16return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=copy) ['$4load_method.1', 'ary']
    $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None) ['$4load_method.1', '$6call_method.2']
    $8load_method.3 = getattr(value=$6call_method.2, attr=reshape) ['$6call_method.2', '$8load_method.3']
    $12load_attr.5 = getattr(value=ary, attr=size) ['$12load_attr.5', 'ary']
    $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1798)], kws=(), vararg=None, target=None) ['$12load_attr.5', '$14call_method.6', '$8load_method.3']
    $16return_value.7 = cast(value=$14call_method.6) ['$14call_method.6', '$16return_value.7']
    return $16return_value.7                 ['$16return_value.7']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344de78d0>
on stmt: ary = arg(0, name=ary)
on stmt: $4load_method.1 = getattr(value=ary, attr=copy)
on stmt: $6call_method.2 = call $4load_method.1(func=$4load_method.1, args=[], kws=(), vararg=None, target=None)
on stmt: $8load_method.3 = getattr(value=$6call_method.2, attr=reshape)
on stmt: $12load_attr.5 = getattr(value=ary, attr=size)
on stmt: $14call_method.6 = call $8load_method.3($12load_attr.5, func=$8load_method.3, args=[Var($12load_attr.5, arrayobj.py:1798)], kws=(), vararg=None, target=None)
on stmt: $16return_value.7 = cast(value=$14call_method.6)
on stmt: return $16return_value.7
defs defaultdict(<class 'list'>,
            {'$12load_attr.5': [<numba.core.ir.Assign object at 0x7fa344de2f10>],
             '$14call_method.6': [<numba.core.ir.Assign object at 0x7fa344de7090>],
             '$16return_value.7': [<numba.core.ir.Assign object at 0x7fa344de7150>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa344de2a90>],
             '$6call_method.2': [<numba.core.ir.Assign object at 0x7fa344de2c10>],
             '$8load_method.3': [<numba.core.ir.Assign object at 0x7fa344de2cd0>],
             'ary': [<numba.core.ir.Assign object at 0x7fa344de2890>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=1630)
           2	LOAD_CONST(arg=1, lineno=1630)
           4	STORE_FAST(arg=2, lineno=1630)
           6	LOAD_CONST(arg=2, lineno=1631)
           8	STORE_FAST(arg=3, lineno=1631)
          10	SETUP_LOOP(arg=50, lineno=1632)
          12	LOAD_GLOBAL(arg=0, lineno=1632)
          14	LOAD_FAST(arg=1, lineno=1632)
          16	CALL_FUNCTION(arg=1, lineno=1632)
          18	GET_ITER(arg=None, lineno=1632)
>         20	FOR_ITER(arg=38, lineno=1632)
          22	UNPACK_SEQUENCE(arg=2, lineno=1632)
          24	STORE_FAST(arg=4, lineno=1632)
          26	STORE_FAST(arg=5, lineno=1632)
          28	LOAD_FAST(arg=5, lineno=1633)
          30	LOAD_CONST(arg=1, lineno=1633)
          32	COMPARE_OP(arg=0, lineno=1633)
          34	POP_JUMP_IF_FALSE(arg=50, lineno=1633)
          36	LOAD_FAST(arg=2, lineno=1634)
          38	LOAD_CONST(arg=2, lineno=1634)
          40	INPLACE_ADD(arg=None, lineno=1634)
          42	STORE_FAST(arg=2, lineno=1634)
          44	LOAD_FAST(arg=4, lineno=1635)
          46	STORE_FAST(arg=6, lineno=1635)
          48	JUMP_ABSOLUTE(arg=20, lineno=1635)
>         50	LOAD_FAST(arg=3, lineno=1637)
          52	LOAD_FAST(arg=5, lineno=1637)
          54	INPLACE_MULTIPLY(arg=None, lineno=1637)
          56	STORE_FAST(arg=3, lineno=1637)
          58	JUMP_ABSOLUTE(arg=20, lineno=1637)
>         60	POP_BLOCK(arg=None, lineno=1637)
>         62	LOAD_FAST(arg=2, lineno=1639)
          64	LOAD_CONST(arg=1, lineno=1639)
          66	COMPARE_OP(arg=2, lineno=1639)
          68	POP_JUMP_IF_FALSE(arg=88, lineno=1639)
          70	LOAD_FAST(arg=0, lineno=1640)
          72	LOAD_FAST(arg=3, lineno=1640)
          74	COMPARE_OP(arg=3, lineno=1640)
          76	POP_JUMP_IF_FALSE(arg=168, lineno=1640)
          78	LOAD_GLOBAL(arg=1, lineno=1641)
          80	LOAD_CONST(arg=3, lineno=1641)
          82	CALL_FUNCTION(arg=1, lineno=1641)
          84	RAISE_VARARGS(arg=1, lineno=1641)
          86	JUMP_FORWARD(arg=80, lineno=1641)
>         88	LOAD_FAST(arg=2, lineno=1643)
          90	LOAD_CONST(arg=2, lineno=1643)
          92	COMPARE_OP(arg=2, lineno=1643)
          94	POP_JUMP_IF_FALSE(arg=160, lineno=1643)
          96	LOAD_FAST(arg=3, lineno=1645)
          98	LOAD_CONST(arg=1, lineno=1645)
         100	COMPARE_OP(arg=2, lineno=1645)
         102	POP_JUMP_IF_FALSE(arg=118, lineno=1645)
         104	LOAD_CONST(arg=1, lineno=1646)
         106	STORE_FAST(arg=7, lineno=1646)
         108	LOAD_FAST(arg=0, lineno=1647)
         110	LOAD_CONST(arg=1, lineno=1647)
         112	COMPARE_OP(arg=2, lineno=1647)
         114	STORE_FAST(arg=8, lineno=1647)
         116	JUMP_FORWARD(arg=20, lineno=1647)
>        118	LOAD_FAST(arg=0, lineno=1649)
         120	LOAD_FAST(arg=3, lineno=1649)
         122	BINARY_FLOOR_DIVIDE(arg=None, lineno=1649)
         124	STORE_FAST(arg=7, lineno=1649)
         126	LOAD_FAST(arg=0, lineno=1650)
         128	LOAD_FAST(arg=3, lineno=1650)
         130	BINARY_MODULO(arg=None, lineno=1650)
         132	LOAD_CONST(arg=1, lineno=1650)
         134	COMPARE_OP(arg=2, lineno=1650)
         136	STORE_FAST(arg=8, lineno=1650)
>        138	LOAD_FAST(arg=8, lineno=1651)
         140	POP_JUMP_IF_TRUE(arg=150, lineno=1651)
         142	LOAD_GLOBAL(arg=1, lineno=1652)
         144	LOAD_CONST(arg=3, lineno=1652)
         146	CALL_FUNCTION(arg=1, lineno=1652)
         148	RAISE_VARARGS(arg=1, lineno=1652)
>        150	LOAD_FAST(arg=7, lineno=1653)
         152	LOAD_FAST(arg=1, lineno=1653)
         154	LOAD_FAST(arg=6, lineno=1653)
         156	STORE_SUBSCR(arg=None, lineno=1653)
         158	JUMP_FORWARD(arg=8, lineno=1653)
>        160	LOAD_GLOBAL(arg=1, lineno=1656)
         162	LOAD_CONST(arg=4, lineno=1656)
         164	CALL_FUNCTION(arg=1, lineno=1656)
         166	RAISE_VARARGS(arg=1, lineno=1656)
>        168	LOAD_CONST(arg=0, lineno=1656)
         170	RETURN_VALUE(arg=None, lineno=1656)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=1630)
stack []
dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=1630)
stack []
dispatch pc=4, inst=STORE_FAST(arg=2, lineno=1630)
stack ['$const2.0']
dispatch pc=6, inst=LOAD_CONST(arg=2, lineno=1631)
stack []
dispatch pc=8, inst=STORE_FAST(arg=3, lineno=1631)
stack ['$const6.1']
end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=10 nstack_initial=0)])
stack: []
dispatch pc=10, inst=SETUP_LOOP(arg=50, lineno=1632)
stack []
dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=1632)
stack []
dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=1632)
stack ['$12load_global.0']
dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=1632)
stack ['$12load_global.0', '$shape14.1']
dispatch pc=18, inst=GET_ITER(arg=None, lineno=1632)
stack ['$16call_function.2']
end state. edges=[Edge(pc=20, stack=('$18get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=20 nstack_initial=1)])
stack: ['$phi20.0']
dispatch pc=20, inst=FOR_ITER(arg=38, lineno=1632)
stack ['$phi20.0']
end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=22, stack=('$phi20.0', '$20for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=22 nstack_initial=2)])
stack: []
dispatch pc=60, inst=POP_BLOCK(arg=None, lineno=1637)
stack []
end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=22 nstack_initial=2), State(pc_initial=62 nstack_initial=0)])
stack: ['$phi22.0', '$phi22.1']
dispatch pc=22, inst=UNPACK_SEQUENCE(arg=2, lineno=1632)
stack ['$phi22.0', '$phi22.1']
dispatch pc=24, inst=STORE_FAST(arg=4, lineno=1632)
stack ['$phi22.0', '$22unpack_sequence.3', '$22unpack_sequence.2']
dispatch pc=26, inst=STORE_FAST(arg=5, lineno=1632)
stack ['$phi22.0', '$22unpack_sequence.3']
dispatch pc=28, inst=LOAD_FAST(arg=5, lineno=1633)
stack ['$phi22.0']
dispatch pc=30, inst=LOAD_CONST(arg=1, lineno=1633)
stack ['$phi22.0', '$s28.5']
dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=1633)
stack ['$phi22.0', '$s28.5', '$const30.6']
dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=50, lineno=1633)
stack ['$phi22.0', '$32compare_op.7']
end state. edges=[Edge(pc=36, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=50, stack=('$phi22.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1)])
stack: []
dispatch pc=62, inst=LOAD_FAST(arg=2, lineno=1639)
stack []
dispatch pc=64, inst=LOAD_CONST(arg=1, lineno=1639)
stack ['$num_neg_value62.0']
dispatch pc=66, inst=COMPARE_OP(arg=2, lineno=1639)
stack ['$num_neg_value62.0', '$const64.1']
dispatch pc=68, inst=POP_JUMP_IF_FALSE(arg=88, lineno=1639)
stack ['$66compare_op.2']
end state. edges=[Edge(pc=70, stack=(), blockstack=(), npush=0), Edge(pc=88, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=36 nstack_initial=1), State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
stack: ['$phi36.0']
dispatch pc=36, inst=LOAD_FAST(arg=2, lineno=1634)
stack ['$phi36.0']
dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=1634)
stack ['$phi36.0', '$num_neg_value36.1']
dispatch pc=40, inst=INPLACE_ADD(arg=None, lineno=1634)
stack ['$phi36.0', '$num_neg_value36.1', '$const38.2']
dispatch pc=42, inst=STORE_FAST(arg=2, lineno=1634)
stack ['$phi36.0', '$40inplace_add.3']
dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=1635)
stack ['$phi36.0']
dispatch pc=46, inst=STORE_FAST(arg=6, lineno=1635)
stack ['$phi36.0', '$ax44.4']
dispatch pc=48, inst=JUMP_ABSOLUTE(arg=20, lineno=1635)
stack ['$phi36.0']
end state. edges=[Edge(pc=20, stack=('$phi36.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=50 nstack_initial=1), State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1)])
stack: ['$phi50.0']
dispatch pc=50, inst=LOAD_FAST(arg=3, lineno=1637)
stack ['$phi50.0']
dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1637)
stack ['$phi50.0', '$known_size50.1']
dispatch pc=54, inst=INPLACE_MULTIPLY(arg=None, lineno=1637)
stack ['$phi50.0', '$known_size50.1', '$s52.2']
dispatch pc=56, inst=STORE_FAST(arg=3, lineno=1637)
stack ['$phi50.0', '$54inplace_multiply.3']
dispatch pc=58, inst=JUMP_ABSOLUTE(arg=20, lineno=1637)
stack ['$phi50.0']
end state. edges=[Edge(pc=20, stack=('$phi50.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=70 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1)])
stack: []
dispatch pc=70, inst=LOAD_FAST(arg=0, lineno=1640)
stack []
dispatch pc=72, inst=LOAD_FAST(arg=3, lineno=1640)
stack ['$origsize70.0']
dispatch pc=74, inst=COMPARE_OP(arg=3, lineno=1640)
stack ['$origsize70.0', '$known_size72.1']
dispatch pc=76, inst=POP_JUMP_IF_FALSE(arg=168, lineno=1640)
stack ['$74compare_op.2']
end state. edges=[Edge(pc=78, stack=(), blockstack=(), npush=0), Edge(pc=168, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0)])
stack: []
dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=1643)
stack []
dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=1643)
stack ['$num_neg_value88.0']
dispatch pc=92, inst=COMPARE_OP(arg=2, lineno=1643)
stack ['$num_neg_value88.0', '$const90.1']
dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=160, lineno=1643)
stack ['$92compare_op.2']
end state. edges=[Edge(pc=96, stack=(), blockstack=(), npush=0), Edge(pc=160, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
pending: deque([State(pc_initial=20 nstack_initial=1), State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
stack: []
dispatch pc=78, inst=LOAD_GLOBAL(arg=1, lineno=1641)
stack []
dispatch pc=80, inst=LOAD_CONST(arg=3, lineno=1641)
stack ['$78load_global.0']
dispatch pc=82, inst=CALL_FUNCTION(arg=1, lineno=1641)
stack ['$78load_global.0', '$const80.1']
dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=1641)
stack ['$82call_function.2']
end state. edges=[]
pending: deque([State(pc_initial=168 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
stack: []
dispatch pc=168, inst=LOAD_CONST(arg=0, lineno=1656)
stack []
dispatch pc=170, inst=RETURN_VALUE(arg=None, lineno=1656)
stack ['$const168.0']
end state. edges=[]
pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=160 nstack_initial=0)])
stack: []
dispatch pc=96, inst=LOAD_FAST(arg=3, lineno=1645)
stack []
dispatch pc=98, inst=LOAD_CONST(arg=1, lineno=1645)
stack ['$known_size96.0']
dispatch pc=100, inst=COMPARE_OP(arg=2, lineno=1645)
stack ['$known_size96.0', '$const98.1']
dispatch pc=102, inst=POP_JUMP_IF_FALSE(arg=118, lineno=1645)
stack ['$100compare_op.2']
end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=160 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
stack: []
dispatch pc=160, inst=LOAD_GLOBAL(arg=1, lineno=1656)
stack []
dispatch pc=162, inst=LOAD_CONST(arg=4, lineno=1656)
stack ['$160load_global.0']
dispatch pc=164, inst=CALL_FUNCTION(arg=1, lineno=1656)
stack ['$160load_global.0', '$const162.1']
dispatch pc=166, inst=RAISE_VARARGS(arg=1, lineno=1656)
stack ['$164call_function.2']
end state. edges=[]
pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
stack: []
dispatch pc=104, inst=LOAD_CONST(arg=1, lineno=1646)
stack []
dispatch pc=106, inst=STORE_FAST(arg=7, lineno=1646)
stack ['$const104.0']
dispatch pc=108, inst=LOAD_FAST(arg=0, lineno=1647)
stack []
dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=1647)
stack ['$origsize108.1']
dispatch pc=112, inst=COMPARE_OP(arg=2, lineno=1647)
stack ['$origsize108.1', '$const110.2']
dispatch pc=114, inst=STORE_FAST(arg=8, lineno=1647)
stack ['$112compare_op.3']
dispatch pc=116, inst=JUMP_FORWARD(arg=20, lineno=1647)
stack []
end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
stack: []
dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=1649)
stack []
dispatch pc=120, inst=LOAD_FAST(arg=3, lineno=1649)
stack ['$origsize118.0']
dispatch pc=122, inst=BINARY_FLOOR_DIVIDE(arg=None, lineno=1649)
stack ['$origsize118.0', '$known_size120.1']
dispatch pc=124, inst=STORE_FAST(arg=7, lineno=1649)
stack ['$122binary_floor_divide.2']
dispatch pc=126, inst=LOAD_FAST(arg=0, lineno=1650)
stack []
dispatch pc=128, inst=LOAD_FAST(arg=3, lineno=1650)
stack ['$origsize126.3']
dispatch pc=130, inst=BINARY_MODULO(arg=None, lineno=1650)
stack ['$origsize126.3', '$known_size128.4']
dispatch pc=132, inst=LOAD_CONST(arg=1, lineno=1650)
stack ['$130binary_modulo.5']
dispatch pc=134, inst=COMPARE_OP(arg=2, lineno=1650)
stack ['$130binary_modulo.5', '$const132.6']
dispatch pc=136, inst=STORE_FAST(arg=8, lineno=1650)
stack ['$134compare_op.7']
end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=138 nstack_initial=0)])
stack: []
dispatch pc=138, inst=LOAD_FAST(arg=8, lineno=1651)
stack []
dispatch pc=140, inst=POP_JUMP_IF_TRUE(arg=150, lineno=1651)
stack ['$ok138.0']
end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
stack: []
dispatch pc=142, inst=LOAD_GLOBAL(arg=1, lineno=1652)
stack []
dispatch pc=144, inst=LOAD_CONST(arg=3, lineno=1652)
stack ['$142load_global.0']
dispatch pc=146, inst=CALL_FUNCTION(arg=1, lineno=1652)
stack ['$142load_global.0', '$const144.1']
dispatch pc=148, inst=RAISE_VARARGS(arg=1, lineno=1652)
stack ['$146call_function.2']
end state. edges=[]
pending: deque([State(pc_initial=150 nstack_initial=0)])
stack: []
dispatch pc=150, inst=LOAD_FAST(arg=7, lineno=1653)
stack []
dispatch pc=152, inst=LOAD_FAST(arg=1, lineno=1653)
stack ['$inferred150.0']
dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=1653)
stack ['$inferred150.0', '$shape152.1']
dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=1653)
stack ['$inferred150.0', '$shape152.1', '$neg_ax154.2']
dispatch pc=158, inst=JUMP_FORWARD(arg=8, lineno=1653)
stack []
end state. edges=[Edge(pc=168, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=168 nstack_initial=0)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=20 nstack_initial=1): {'$phi20.0'},
             State(pc_initial=22 nstack_initial=2): {'$phi22.1'},
             State(pc_initial=36 nstack_initial=1): set(),
             State(pc_initial=50 nstack_initial=1): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=138 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=160 nstack_initial=0): set(),
             State(pc_initial=168 nstack_initial=0): set()})
defmap: {'$phi20.0': State(pc_initial=10 nstack_initial=0),
 '$phi22.1': State(pc_initial=20 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi36.0', State(pc_initial=36 nstack_initial=1)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi22.0': {('$phi20.0', State(pc_initial=20 nstack_initial=1))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi50.0': {('$phi22.0', State(pc_initial=22 nstack_initial=2))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=2))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi20.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi22.1': {('$20for_iter.2',
                           State(pc_initial=20 nstack_initial=1))},
             '$phi36.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))},
             '$phi50.0': {('$18get_iter.3',
                           State(pc_initial=10 nstack_initial=0))}})
keep phismap: {'$phi20.0': {('$18get_iter.3', State(pc_initial=10 nstack_initial=0))},
 '$phi22.1': {('$20for_iter.2', State(pc_initial=20 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi20.0': '$18get_iter.3'},
             State(pc_initial=20 nstack_initial=1): {'$phi22.1': '$20for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'}), (6, {'res': '$const6.1'}), (8, {'value': '$const6.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: ()})
block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((12, {'res': '$12load_global.0'}), (14, {'res': '$shape14.1'}), (16, {'func': '$12load_global.0', 'args': ['$shape14.1'], 'res': '$16call_function.2'}), (18, {'value': '$16call_function.2', 'res': '$18get_iter.3'})), outgoing_phis={'$phi20.0': '$18get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={20: ('$18get_iter.3',)})
block_infos State(pc_initial=20 nstack_initial=1):
AdaptBlockInfo(insts=((20, {'iterator': '$phi20.0', 'pair': '$20for_iter.1', 'indval': '$20for_iter.2', 'pred': '$20for_iter.3'}),), outgoing_phis={'$phi22.1': '$20for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 22: ('$phi20.0', '$20for_iter.2')})
block_infos State(pc_initial=22 nstack_initial=2):
AdaptBlockInfo(insts=((22, {'iterable': '$phi22.1', 'stores': ['$22unpack_sequence.2', '$22unpack_sequence.3'], 'tupleobj': '$22unpack_sequence.4'}), (24, {'value': '$22unpack_sequence.2'}), (26, {'value': '$22unpack_sequence.3'}), (28, {'res': '$s28.5'}), (30, {'res': '$const30.6'}), (32, {'lhs': '$s28.5', 'rhs': '$const30.6', 'res': '$32compare_op.7'}), (34, {'pred': '$32compare_op.7'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: ('$phi22.0',), 50: ('$phi22.0',)})
block_infos State(pc_initial=36 nstack_initial=1):
AdaptBlockInfo(insts=((36, {'res': '$num_neg_value36.1'}), (38, {'res': '$const38.2'}), (40, {'lhs': '$num_neg_value36.1', 'rhs': '$const38.2', 'res': '$40inplace_add.3'}), (42, {'value': '$40inplace_add.3'}), (44, {'res': '$ax44.4'}), (46, {'value': '$ax44.4'}), (48, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi36.0',)})
block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'res': '$known_size50.1'}), (52, {'res': '$s52.2'}), (54, {'lhs': '$known_size50.1', 'rhs': '$s52.2', 'res': '$54inplace_multiply.3'}), (56, {'value': '$54inplace_multiply.3'}), (58, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={20: ('$phi50.0',)})
block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 62, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={62: ()})
block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$num_neg_value62.0'}), (64, {'res': '$const64.1'}), (66, {'lhs': '$num_neg_value62.0', 'rhs': '$const64.1', 'res': '$66compare_op.2'}), (68, {'pred': '$66compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={70: (), 88: ()})
block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'res': '$origsize70.0'}), (72, {'res': '$known_size72.1'}), (74, {'lhs': '$origsize70.0', 'rhs': '$known_size72.1', 'res': '$74compare_op.2'}), (76, {'pred': '$74compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: (), 168: ()})
block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=((78, {'res': '$78load_global.0'}), (80, {'res': '$const80.1'}), (82, {'func': '$78load_global.0', 'args': ['$const80.1'], 'res': '$82call_function.2'}), (84, {'exc': '$82call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$num_neg_value88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$num_neg_value88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: (), 160: ()})
block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$known_size96.0'}), (98, {'res': '$const98.1'}), (100, {'lhs': '$known_size96.0', 'rhs': '$const98.1', 'res': '$100compare_op.2'}), (102, {'pred': '$100compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 118: ()})
block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$const104.0'}), (106, {'value': '$const104.0'}), (108, {'res': '$origsize108.1'}), (110, {'res': '$const110.2'}), (112, {'lhs': '$origsize108.1', 'rhs': '$const110.2', 'res': '$112compare_op.3'}), (114, {'value': '$112compare_op.3'}), (116, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$origsize118.0'}), (120, {'res': '$known_size120.1'}), (122, {'lhs': '$origsize118.0', 'rhs': '$known_size120.1', 'res': '$122binary_floor_divide.2'}), (124, {'value': '$122binary_floor_divide.2'}), (126, {'res': '$origsize126.3'}), (128, {'res': '$known_size128.4'}), (130, {'lhs': '$origsize126.3', 'rhs': '$known_size128.4', 'res': '$130binary_modulo.5'}), (132, {'res': '$const132.6'}), (134, {'lhs': '$130binary_modulo.5', 'rhs': '$const132.6', 'res': '$134compare_op.7'}), (136, {'value': '$134compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: ()})
block_infos State(pc_initial=138 nstack_initial=0):
AdaptBlockInfo(insts=((138, {'res': '$ok138.0'}), (140, {'pred': '$ok138.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 150: ()})
block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$142load_global.0'}), (144, {'res': '$const144.1'}), (146, {'func': '$142load_global.0', 'args': ['$const144.1'], 'res': '$146call_function.2'}), (148, {'exc': '$146call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$inferred150.0'}), (152, {'res': '$shape152.1'}), (154, {'res': '$neg_ax154.2'}), (156, {'target': '$shape152.1', 'index': '$neg_ax154.2', 'value': '$inferred150.0'}), (158, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={168: ()})
block_infos State(pc_initial=160 nstack_initial=0):
AdaptBlockInfo(insts=((160, {'res': '$160load_global.0'}), (162, {'res': '$const162.1'}), (164, {'func': '$160load_global.0', 'args': ['$const162.1'], 'res': '$164call_function.2'}), (166, {'exc': '$164call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
block_infos State(pc_initial=168 nstack_initial=0):
AdaptBlockInfo(insts=((168, {'res': '$const168.0'}), (170, {'retval': '$const168.0', 'castval': '$170return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    jump 10                                  []
label 10:
    $12load_global.0 = global(enumerate: <class 'enumerate'>) ['$12load_global.0']
    $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None) ['$12load_global.0', '$16call_function.2', 'shape']
    $18get_iter.3 = getiter(value=$16call_function.2) ['$16call_function.2', '$18get_iter.3']
    $phi20.0 = $18get_iter.3                 ['$18get_iter.3', '$phi20.0']
    jump 20                                  []
label 20:
    $20for_iter.1 = iternext(value=$phi20.0) ['$20for_iter.1', '$phi20.0']
    $20for_iter.2 = pair_first(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.2']
    $20for_iter.3 = pair_second(value=$20for_iter.1) ['$20for_iter.1', '$20for_iter.3']
    $phi22.1 = $20for_iter.2                 ['$20for_iter.2', '$phi22.1']
    branch $20for_iter.3, 22, 60             ['$20for_iter.3']
label 22:
    $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2) ['$22unpack_sequence.4', '$phi22.1']
    $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.2', '$22unpack_sequence.4']
    $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$22unpack_sequence.3', '$22unpack_sequence.4']
    ax = $22unpack_sequence.2                ['$22unpack_sequence.2', 'ax']
    s = $22unpack_sequence.3                 ['$22unpack_sequence.3', 's']
    $const30.6 = const(int, 0)               ['$const30.6']
    $32compare_op.7 = s < $const30.6         ['$32compare_op.7', '$const30.6', 's']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None) ['$32compare_op.7', '$34pred', 'bool34']
    branch $34pred, 36, 50                   ['$34pred']
label 36:
    $const38.2 = const(int, 1)               ['$const38.2']
    $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined) ['$40inplace_add.3', '$const38.2', 'num_neg_value']
    num_neg_value = $40inplace_add.3         ['$40inplace_add.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 20                                  []
label 50:
    $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$54inplace_multiply.3', 'known_size', 's']
    known_size = $54inplace_multiply.3       ['$54inplace_multiply.3', 'known_size']
    jump 20                                  []
label 60:
    jump 62                                  []
label 62:
    $const64.1 = const(int, 0)               ['$const64.1']
    $66compare_op.2 = num_neg_value == $const64.1 ['$66compare_op.2', '$const64.1', 'num_neg_value']
    bool68 = global(bool: <class 'bool'>)    ['bool68']
    $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None) ['$66compare_op.2', '$68pred', 'bool68']
    branch $68pred, 70, 88                   ['$68pred']
label 70:
    $74compare_op.2 = origsize != known_size ['$74compare_op.2', 'known_size', 'origsize']
    bool76 = global(bool: <class 'bool'>)    ['bool76']
    $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None) ['$74compare_op.2', '$76pred', 'bool76']
    branch $76pred, 78, 168                  ['$76pred']
label 78:
    $78load_global.0 = global(ValueError: <class 'ValueError'>) ['$78load_global.0']
    $const80.1 = const(str, total size of new array must be unchanged) ['$const80.1']
    $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None) ['$78load_global.0', '$82call_function.2', '$const80.1']
    raise $82call_function.2                 ['$82call_function.2']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = num_neg_value == $const90.1 ['$92compare_op.2', '$const90.1', 'num_neg_value']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 160                  ['$94pred']
label 96:
    $const98.1 = const(int, 0)               ['$const98.1']
    $100compare_op.2 = known_size == $const98.1 ['$100compare_op.2', '$const98.1', 'known_size']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None) ['$100compare_op.2', '$102pred', 'bool102']
    branch $102pred, 104, 118                ['$102pred']
label 104:
    inferred = const(int, 0)                 ['inferred']
    $const110.2 = const(int, 0)              ['$const110.2']
    ok = origsize == $const110.2             ['$const110.2', 'ok', 'origsize']
    jump 138                                 []
label 118:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $130binary_modulo.5 = origsize % known_size ['$130binary_modulo.5', 'known_size', 'origsize']
    $const132.6 = const(int, 0)              ['$const132.6']
    ok = $130binary_modulo.5 == $const132.6  ['$130binary_modulo.5', '$const132.6', 'ok']
    jump 138                                 []
label 138:
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None) ['$140pred', 'bool140', 'ok']
    branch $140pred, 150, 142                ['$140pred']
label 142:
    $142load_global.0 = global(ValueError: <class 'ValueError'>) ['$142load_global.0']
    $const144.1 = const(str, total size of new array must be unchanged) ['$const144.1']
    $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None) ['$142load_global.0', '$146call_function.2', '$const144.1']
    raise $146call_function.2                ['$146call_function.2']
label 150:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    jump 168                                 []
label 160:
    $160load_global.0 = global(ValueError: <class 'ValueError'>) ['$160load_global.0']
    $const162.1 = const(str, multiple negative shape values) ['$const162.1']
    $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None) ['$160load_global.0', '$164call_function.2', '$const162.1']
    raise $164call_function.2                ['$164call_function.2']
label 168:
    $const168.0 = const(NoneType, None)      ['$const168.0']
    $170return_value.1 = cast(value=$const168.0) ['$170return_value.1', '$const168.0']
    return $170return_value.1                ['$170return_value.1']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block analysis pass on 10
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block analysis pass on 20
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block analysis pass on 22
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block analysis pass on 36
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block analysis pass on 50
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
on stmt: jump 169
==== SSA block analysis pass on 60
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: jump 62
==== SSA block analysis pass on 62
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block analysis pass on 70
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block analysis pass on 78
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block analysis pass on 96
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block analysis pass on 104
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block analysis pass on 118
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: inferred = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block analysis pass on 138
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block analysis pass on 142
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block analysis pass on 150
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: shape[neg_ax] = inferred
on stmt: jump 168
==== SSA block analysis pass on 160
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block analysis pass on 168
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block analysis pass on 169
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344f8a690>
on stmt: jump 20
defs defaultdict(<class 'list'>,
            {'$100compare_op.2': [<numba.core.ir.Assign object at 0x7fa344d4de90>],
             '$102pred': [<numba.core.ir.Assign object at 0x7fa344d50110>],
             '$12load_global.0': [<numba.core.ir.Assign object at 0x7fa344e63b90>],
             '$130binary_modulo.5': [<numba.core.ir.Assign object at 0x7fa344d50d50>],
             '$140pred': [<numba.core.ir.Assign object at 0x7fa344d551d0>],
             '$142load_global.0': [<numba.core.ir.Assign object at 0x7fa344d55350>],
             '$146call_function.2': [<numba.core.ir.Assign object at 0x7fa344d55590>],
             '$160load_global.0': [<numba.core.ir.Assign object at 0x7fa344d55a90>],
             '$164call_function.2': [<numba.core.ir.Assign object at 0x7fa344d55cd0>],
             '$16call_function.2': [<numba.core.ir.Assign object at 0x7fa344f5f490>],
             '$170return_value.1': [<numba.core.ir.Assign object at 0x7fa344d55fd0>],
             '$18get_iter.3': [<numba.core.ir.Assign object at 0x7fa344f5f390>],
             '$20for_iter.1': [<numba.core.ir.Assign object at 0x7fa344f5f950>],
             '$20for_iter.2': [<numba.core.ir.Assign object at 0x7fa344f5fa10>],
             '$20for_iter.3': [<numba.core.ir.Assign object at 0x7fa344f5ff10>],
             '$22unpack_sequence.2': [<numba.core.ir.Assign object at 0x7fa344e51650>],
             '$22unpack_sequence.3': [<numba.core.ir.Assign object at 0x7fa344e51090>],
             '$22unpack_sequence.4': [<numba.core.ir.Assign object at 0x7fa344f5f190>],
             '$32compare_op.7': [<numba.core.ir.Assign object at 0x7fa344e51ad0>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fa344e51e10>],
             '$40inplace_add.3': [<numba.core.ir.Assign object at 0x7fa344f8af90>],
             '$54inplace_multiply.3': [<numba.core.ir.Assign object at 0x7fa344db6550>],
             '$66compare_op.2': [<numba.core.ir.Assign object at 0x7fa344db69d0>],
             '$68pred': [<numba.core.ir.Assign object at 0x7fa344db6c10>],
             '$74compare_op.2': [<numba.core.ir.Assign object at 0x7fa344db6f50>],
             '$76pred': [<numba.core.ir.Assign object at 0x7fa344d4d1d0>],
             '$78load_global.0': [<numba.core.ir.Assign object at 0x7fa344d4d310>],
             '$82call_function.2': [<numba.core.ir.Assign object at 0x7fa344d4d550>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fa344d4d8d0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fa344d4db10>],
             '$const110.2': [<numba.core.ir.Assign object at 0x7fa344d50550>],
             '$const132.6': [<numba.core.ir.Assign object at 0x7fa344d50e50>],
             '$const144.1': [<numba.core.ir.Assign object at 0x7fa344d55450>],
             '$const162.1': [<numba.core.ir.Assign object at 0x7fa344d55b90>],
             '$const168.0': [<numba.core.ir.Assign object at 0x7fa344d55e90>],
             '$const30.6': [<numba.core.ir.Assign object at 0x7fa344e51850>],
             '$const38.2': [<numba.core.ir.Assign object at 0x7fa344f8a710>],
             '$const64.1': [<numba.core.ir.Assign object at 0x7fa344db68d0>],
             '$const80.1': [<numba.core.ir.Assign object at 0x7fa344d4d410>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fa344d4d7d0>],
             '$const98.1': [<numba.core.ir.Assign object at 0x7fa344d4dd90>],
             '$phi20.0': [<numba.core.ir.Assign object at 0x7fa344e85f10>],
             '$phi22.1': [<numba.core.ir.Assign object at 0x7fa344f5fc50>],
             'ax': [<numba.core.ir.Assign object at 0x7fa344e516d0>],
             'bool102': [<numba.core.ir.Assign object at 0x7fa344d4dfd0>],
             'bool140': [<numba.core.ir.Assign object at 0x7fa344d550d0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fa344e51cd0>],
             'bool68': [<numba.core.ir.Assign object at 0x7fa344db6b10>],
             'bool76': [<numba.core.ir.Assign object at 0x7fa344d4d0d0>],
             'bool94': [<numba.core.ir.Assign object at 0x7fa344d4da10>],
             'inferred': [<numba.core.ir.Assign object at 0x7fa344d502d0>,
                          <numba.core.ir.Assign object at 0x7fa344d50a10>],
             'known_size': [<numba.core.ir.Assign object at 0x7fa344e87c10>,
                            <numba.core.ir.Assign object at 0x7fa344db6190>],
             'neg_ax': [<numba.core.ir.Assign object at 0x7fa344db6210>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x7fa344e87b90>,
                               <numba.core.ir.Assign object at 0x7fa344e51f10>],
             'ok': [<numba.core.ir.Assign object at 0x7fa344d50650>,
                    <numba.core.ir.Assign object at 0x7fa344d50f50>],
             'origsize': [<numba.core.ir.Assign object at 0x7fa344f465d0>],
             's': [<numba.core.ir.Assign object at 0x7fa344e51390>],
             'shape': [<numba.core.ir.Assign object at 0x7fa344f46550>]})
SSA violators {'num_neg_value', 'ok', 'inferred', 'known_size'}
Fix SSA violator on var num_neg_value
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
first assign: num_neg_value
replaced with: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value = $40inplace_add.3
replaced with: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: inferred = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: shape[neg_ax] = inferred
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85550>
on stmt: jump 20
Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa344e858d0>],
             36: [<numba.core.ir.Assign object at 0x7fa344db6cd0>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
find_def var='num_neg_value' stmt=$40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
find_def_from_top label 36
idom 22 from label 36
find_def_from_bottom label 22
find_def_from_top label 22
idom 20 from label 22
find_def_from_bottom label 20
find_def_from_top label 20
insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
find_def_from_bottom label 169
find_def_from_top label 169
insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
find_def_from_bottom label 50
find_def_from_top label 50
idom 22 from label 50
find_def_from_bottom label 22
find_def_from_top label 22
idom 20 from label 22
find_def_from_bottom label 20
incoming_def num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[])
find_def_from_bottom label 36
incoming_def num_neg_value.1 = $40inplace_add.3
incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[50, 36])
find_def_from_bottom label 10
find_def_from_top label 10
idom 0 from label 10
find_def_from_bottom label 0
incoming_def num_neg_value = const(int, 0)
replaced with: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value == $const64.1
find_def var='num_neg_value' stmt=$66compare_op.2 = num_neg_value == $const64.1
find_def_from_top label 62
idom 60 from label 62
find_def_from_bottom label 60
find_def_from_top label 60
idom 20 from label 60
find_def_from_bottom label 20
replaced with: $66compare_op.2 = num_neg_value.2 == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value == $const90.1
find_def var='num_neg_value' stmt=$92compare_op.2 = num_neg_value == $const90.1
find_def_from_top label 88
idom 62 from label 88
find_def_from_bottom label 62
find_def_from_top label 62
idom 60 from label 62
find_def_from_bottom label 60
find_def_from_top label 60
idom 20 from label 60
find_def_from_bottom label 20
replaced with: $92compare_op.2 = num_neg_value.2 == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: inferred = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: shape[neg_ax] = inferred
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85550>
on stmt: jump 20
Fix SSA violator on var ok
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1634), Var(num_neg_value, arrayobj.py:1630)], incoming_blocks=[169, 10])
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
first assign: ok
replaced with: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: inferred = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok = $130binary_modulo.5 == $const132.6
replaced with: ok.1 = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: shape[neg_ax] = inferred
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344f8a410>
on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[50, 36])
on stmt: jump 20
Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fa344e85410>],
             118: [<numba.core.ir.Assign object at 0x7fa344d585d0>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1634), Var(num_neg_value, arrayobj.py:1630)], incoming_blocks=[169, 10])
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: inferred = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok.1 = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
find_def var='ok' stmt=$140pred = call bool140(ok, func=bool140, args=(Var(ok, arrayobj.py:1647),), kws=(), vararg=None, target=None)
find_def_from_top label 138
insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
find_def_from_bottom label 104
incoming_def ok = origsize == $const110.2
find_def_from_bottom label 118
incoming_def ok.1 = $130binary_modulo.5 == $const132.6
replaced with: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: shape[neg_ax] = inferred
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FixSSAVars object at 0x7fa344e85d10>
on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[50, 36])
on stmt: jump 20
Fix SSA violator on var inferred
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1634), Var(num_neg_value, arrayobj.py:1630)], incoming_blocks=[169, 10])
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: inferred = const(int, 0)
first assign: inferred
replaced with: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: inferred = origsize // known_size
replaced with: inferred.1 = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok.1 = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1647), Var(ok.1, arrayobj.py:1650)], incoming_blocks=[104, 118])
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: shape[neg_ax] = inferred
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344d58750>
on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[50, 36])
on stmt: jump 20
Replaced assignments: defaultdict(<class 'list'>,
            {104: [<numba.core.ir.Assign object at 0x7fa344e85450>],
             118: [<numba.core.ir.Assign object at 0x7fa344e85050>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1634), Var(num_neg_value, arrayobj.py:1630)], incoming_blocks=[169, 10])
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: inferred.1 = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok.1 = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1647), Var(ok.1, arrayobj.py:1650)], incoming_blocks=[104, 118])
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: shape[neg_ax] = inferred
find_def var='inferred' stmt=shape[neg_ax] = inferred
find_def_from_top label 150
idom 138 from label 150
find_def_from_bottom label 138
find_def_from_top label 138
insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 138
find_def_from_bottom label 104
incoming_def inferred = const(int, 0)
find_def_from_bottom label 118
incoming_def inferred.1 = origsize // known_size
replaced with: shape[neg_ax] = inferred.2
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FixSSAVars object at 0x7fa344f8a410>
on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[50, 36])
on stmt: jump 20
Fix SSA violator on var known_size
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
first assign: known_size
replaced with: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1634), Var(num_neg_value, arrayobj.py:1630)], incoming_blocks=[169, 10])
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size = $54inplace_multiply.3
replaced with: known_size.1 = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $74compare_op.2 = origsize != known_size
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: inferred.1 = origsize // known_size
on stmt: $130binary_modulo.5 = origsize % known_size
on stmt: $const132.6 = const(int, 0)
on stmt: ok.1 = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1646), Var(inferred.1, arrayobj.py:1649)], incoming_blocks=[104, 118])
on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1647), Var(ok.1, arrayobj.py:1650)], incoming_blocks=[104, 118])
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: shape[neg_ax] = inferred.2
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344e85d10>
on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[50, 36])
on stmt: jump 20
Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x7fa344e85850>],
             50: [<numba.core.ir.Assign object at 0x7fa344f5fd50>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: origsize = arg(0, name=origsize)
on stmt: shape = arg(1, name=shape)
on stmt: num_neg_value = const(int, 0)
on stmt: known_size = const(int, 1)
on stmt: jump 10
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $12load_global.0 = global(enumerate: <class 'enumerate'>)
on stmt: $16call_function.2 = call $12load_global.0(shape, func=$12load_global.0, args=[Var(shape, arrayobj.py:1630)], kws=(), vararg=None, target=None)
on stmt: $18get_iter.3 = getiter(value=$16call_function.2)
on stmt: $phi20.0 = $18get_iter.3
on stmt: jump 20
==== SSA block rewrite pass on 20
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: num_neg_value.2 = phi(incoming_values=[Var(num_neg_value.3, arrayobj.py:1634), Var(num_neg_value, arrayobj.py:1630)], incoming_blocks=[169, 10])
on stmt: $20for_iter.1 = iternext(value=$phi20.0)
on stmt: $20for_iter.2 = pair_first(value=$20for_iter.1)
on stmt: $20for_iter.3 = pair_second(value=$20for_iter.1)
on stmt: $phi22.1 = $20for_iter.2
on stmt: branch $20for_iter.3, 22, 60
==== SSA block rewrite pass on 22
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $22unpack_sequence.4 = exhaust_iter(value=$phi22.1, count=2)
on stmt: $22unpack_sequence.2 = static_getitem(value=$22unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
on stmt: $22unpack_sequence.3 = static_getitem(value=$22unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
on stmt: ax = $22unpack_sequence.2
on stmt: s = $22unpack_sequence.3
on stmt: $const30.6 = const(int, 0)
on stmt: $32compare_op.7 = s < $const30.6
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.7, func=bool34, args=(Var($32compare_op.7, arrayobj.py:1633),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 50
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $const38.2 = const(int, 1)
on stmt: $40inplace_add.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const38.2, static_lhs=Undefined, static_rhs=Undefined)
on stmt: num_neg_value.1 = $40inplace_add.3
on stmt: neg_ax = ax
on stmt: jump 169
==== SSA block rewrite pass on 50
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
find_def var='known_size' stmt=$54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
find_def_from_top label 50
idom 22 from label 50
find_def_from_bottom label 22
find_def_from_top label 22
idom 20 from label 22
find_def_from_bottom label 20
find_def_from_top label 20
insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 20
find_def_from_bottom label 169
find_def_from_top label 169
insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 169
find_def_from_bottom label 50
incoming_def known_size.1 = $54inplace_multiply.3
find_def_from_bottom label 36
find_def_from_top label 36
idom 22 from label 36
find_def_from_bottom label 22
find_def_from_top label 22
idom 20 from label 22
find_def_from_bottom label 20
incoming_def known_size.2 = phi(incoming_values=[], incoming_blocks=[])
incoming_def known_size.3 = phi(incoming_values=[Var(known_size.1, arrayobj.py:1637), Var(known_size.2, arrayobj.py:1637)], incoming_blocks=[50, 36])
find_def_from_bottom label 10
find_def_from_top label 10
idom 0 from label 10
find_def_from_bottom label 0
incoming_def known_size = const(int, 1)
replaced with: $54inplace_multiply.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
on stmt: known_size.1 = $54inplace_multiply.3
on stmt: jump 169
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: jump 62
==== SSA block rewrite pass on 62
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $const64.1 = const(int, 0)
on stmt: $66compare_op.2 = num_neg_value.2 == $const64.1
on stmt: bool68 = global(bool: <class 'bool'>)
on stmt: $68pred = call bool68($66compare_op.2, func=bool68, args=(Var($66compare_op.2, arrayobj.py:1639),), kws=(), vararg=None, target=None)
on stmt: branch $68pred, 70, 88
==== SSA block rewrite pass on 70
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $74compare_op.2 = origsize != known_size
find_def var='known_size' stmt=$74compare_op.2 = origsize != known_size
find_def_from_top label 70
idom 62 from label 70
find_def_from_bottom label 62
find_def_from_top label 62
idom 60 from label 62
find_def_from_bottom label 60
find_def_from_top label 60
idom 20 from label 60
find_def_from_bottom label 20
replaced with: $74compare_op.2 = origsize != known_size.2
on stmt: bool76 = global(bool: <class 'bool'>)
on stmt: $76pred = call bool76($74compare_op.2, func=bool76, args=(Var($74compare_op.2, arrayobj.py:1640),), kws=(), vararg=None, target=None)
on stmt: branch $76pred, 78, 168
==== SSA block rewrite pass on 78
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $78load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const80.1 = const(str, total size of new array must be unchanged)
on stmt: $82call_function.2 = call $78load_global.0($const80.1, func=$78load_global.0, args=[Var($const80.1, arrayobj.py:1641)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = num_neg_value.2 == $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, arrayobj.py:1643),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 160
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $const98.1 = const(int, 0)
on stmt: $100compare_op.2 = known_size == $const98.1
find_def var='known_size' stmt=$100compare_op.2 = known_size == $const98.1
find_def_from_top label 96
idom 88 from label 96
find_def_from_bottom label 88
find_def_from_top label 88
idom 62 from label 88
find_def_from_bottom label 62
find_def_from_top label 62
idom 60 from label 62
find_def_from_bottom label 60
find_def_from_top label 60
idom 20 from label 60
find_def_from_bottom label 20
replaced with: $100compare_op.2 = known_size.2 == $const98.1
on stmt: bool102 = global(bool: <class 'bool'>)
on stmt: $102pred = call bool102($100compare_op.2, func=bool102, args=(Var($100compare_op.2, arrayobj.py:1645),), kws=(), vararg=None, target=None)
on stmt: branch $102pred, 104, 118
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: inferred = const(int, 0)
on stmt: $const110.2 = const(int, 0)
on stmt: ok = origsize == $const110.2
on stmt: jump 138
==== SSA block rewrite pass on 118
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: inferred.1 = origsize // known_size
find_def var='known_size' stmt=inferred.1 = origsize // known_size
find_def_from_top label 118
idom 96 from label 118
find_def_from_bottom label 96
find_def_from_top label 96
idom 88 from label 96
find_def_from_bottom label 88
find_def_from_top label 88
idom 62 from label 88
find_def_from_bottom label 62
find_def_from_top label 62
idom 60 from label 62
find_def_from_bottom label 60
find_def_from_top label 60
idom 20 from label 60
find_def_from_bottom label 20
replaced with: inferred.1 = origsize // known_size.2
on stmt: $130binary_modulo.5 = origsize % known_size
find_def var='known_size' stmt=$130binary_modulo.5 = origsize % known_size
find_def_from_top label 118
idom 96 from label 118
find_def_from_bottom label 96
find_def_from_top label 96
idom 88 from label 96
find_def_from_bottom label 88
find_def_from_top label 88
idom 62 from label 88
find_def_from_bottom label 62
find_def_from_top label 62
idom 60 from label 62
find_def_from_bottom label 60
find_def_from_top label 60
idom 20 from label 60
find_def_from_bottom label 20
replaced with: $130binary_modulo.5 = origsize % known_size.2
on stmt: $const132.6 = const(int, 0)
on stmt: ok.1 = $130binary_modulo.5 == $const132.6
on stmt: jump 138
==== SSA block rewrite pass on 138
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: inferred.2 = phi(incoming_values=[Var(inferred, arrayobj.py:1646), Var(inferred.1, arrayobj.py:1649)], incoming_blocks=[104, 118])
on stmt: ok.2 = phi(incoming_values=[Var(ok, arrayobj.py:1647), Var(ok.1, arrayobj.py:1650)], incoming_blocks=[104, 118])
on stmt: bool140 = global(bool: <class 'bool'>)
on stmt: $140pred = call bool140(ok.2, func=bool140, args=(Var(ok.2, arrayobj.py:1651),), kws=(), vararg=None, target=None)
on stmt: branch $140pred, 150, 142
==== SSA block rewrite pass on 142
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $142load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const144.1 = const(str, total size of new array must be unchanged)
on stmt: $146call_function.2 = call $142load_global.0($const144.1, func=$142load_global.0, args=[Var($const144.1, arrayobj.py:1652)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
==== SSA block rewrite pass on 150
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: shape[neg_ax] = inferred.2
on stmt: jump 168
==== SSA block rewrite pass on 160
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $160load_global.0 = global(ValueError: <class 'ValueError'>)
on stmt: $const162.1 = const(str, multiple negative shape values)
on stmt: $164call_function.2 = call $160load_global.0($const162.1, func=$160load_global.0, args=[Var($const162.1, arrayobj.py:1656)], kws=(), vararg=None, target=None)
on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
==== SSA block rewrite pass on 168
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: $const168.0 = const(NoneType, None)
on stmt: $170return_value.1 = cast(value=$const168.0)
on stmt: return $170return_value.1
==== SSA block rewrite pass on 169
Running <numba.core.ssa._FixSSAVars object at 0x7fa344d58dd0>
on stmt: num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.2, arrayobj.py:1634), Var(num_neg_value.1, arrayobj.py:1634)], incoming_blocks=[50, 36])
on stmt: jump 20
bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2611)
           6	LOAD_FAST(arg=1, lineno=2612)
           8	CALL_FUNCTION(arg=2, lineno=2612)
          10	RETURN_VALUE(arg=None, lineno=2612)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=1)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2611)
stack ['$2load_global.0']
dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2612)
stack ['$2load_global.0', '$_42call_method_18_14.1']
dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=2612)
stack ['$2load_global.0', '$_42call_method_18_14.1', '$_60call_method_27_16.2']
dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=2612)
stack ['$8call_function.3']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$_42call_method_18_14.1'}), (6, {'res': '$_60call_method_27_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$_42call_method_18_14.1', '$_60call_method_27_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    _42call_method_18_1 = arg(0, name=_42call_method_18_1) ['_42call_method_18_1']
    _60call_method_27_1 = arg(1, name=_60call_method_27_1) ['_60call_method_27_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fa38ac9d35: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(_42call_method_18_1, _60call_method_27_1, func=$2load_global.0, args=[Var(_42call_method_18_1, linalg.py:1), Var(_60call_method_27_1, linalg.py:1)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', '_42call_method_18_1', '_60call_method_27_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344c30790>
on stmt: _42call_method_18_1 = arg(0, name=_42call_method_18_1)
on stmt: _60call_method_27_1 = arg(1, name=_60call_method_27_1)
on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7fa38ac9d35: <ufunc 'multiply'>)
on stmt: $8call_function.3 = call $2load_global.0(_42call_method_18_1, _60call_method_27_1, func=$2load_global.0, args=[Var(_42call_method_18_1, linalg.py:1), Var(_60call_method_27_1, linalg.py:1)], kws=(), vararg=None, target=None)
on stmt: $10return_value.4 = cast(value=$8call_function.3)
on stmt: return $10return_value.4
defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa344ba9810>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa344ba9410>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa344ba9710>],
             '_42call_method_18_1': [<numba.core.ir.Assign object at 0x7fa344ba2290>],
             '_60call_method_27_1': [<numba.core.ir.Assign object at 0x7fa344ba9290>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=205)
           2	LOAD_FAST(arg=0, lineno=205)
           4	LOAD_FAST(arg=2, lineno=205)
           6	COMPARE_OP(arg=4, lineno=205)
           8	POP_JUMP_IF_FALSE(arg=14, lineno=205)
          10	LOAD_CONST(arg=1, lineno=208)
          12	RETURN_VALUE(arg=None, lineno=208)
>         14	LOAD_CONST(arg=1, lineno=210)
          16	STORE_FAST(arg=4, lineno=210)
          18	LOAD_FAST(arg=2, lineno=211)
          20	LOAD_FAST(arg=0, lineno=211)
          22	BINARY_SUBTRACT(arg=None, lineno=211)
          24	STORE_FAST(arg=5, lineno=211)
          26	SETUP_LOOP(arg=96, lineno=212)
>         28	LOAD_FAST(arg=4, lineno=212)
          30	LOAD_FAST(arg=0, lineno=212)
          32	COMPARE_OP(arg=0, lineno=212)
          34	POP_JUMP_IF_FALSE(arg=122, lineno=212)
          36	LOAD_FAST(arg=1, lineno=213)
          38	LOAD_FAST(arg=4, lineno=213)
          40	BINARY_SUBSCR(arg=None, lineno=213)
          42	STORE_FAST(arg=6, lineno=213)
          44	LOAD_FAST(arg=3, lineno=214)
          46	LOAD_FAST(arg=5, lineno=214)
          48	BINARY_SUBSCR(arg=None, lineno=214)
          50	STORE_FAST(arg=7, lineno=214)
          52	LOAD_FAST(arg=7, lineno=217)
          54	LOAD_CONST(arg=2, lineno=217)
          56	COMPARE_OP(arg=3, lineno=217)
          58	POP_JUMP_IF_FALSE(arg=88, lineno=217)
          60	LOAD_FAST(arg=6, lineno=221)
          62	LOAD_FAST(arg=7, lineno=221)
          64	COMPARE_OP(arg=3, lineno=221)
          66	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          68	LOAD_FAST(arg=6, lineno=221)
          70	LOAD_CONST(arg=2, lineno=221)
          72	COMPARE_OP(arg=3, lineno=221)
          74	POP_JUMP_IF_FALSE(arg=104, lineno=221)
          76	LOAD_FAST(arg=5, lineno=222)
          78	LOAD_CONST(arg=2, lineno=222)
          80	BINARY_ADD(arg=None, lineno=222)
          82	UNARY_NEGATIVE(arg=None, lineno=222)
          84	RETURN_VALUE(arg=None, lineno=222)
          86	JUMP_FORWARD(arg=16, lineno=222)
>         88	LOAD_FAST(arg=6, lineno=223)
          90	LOAD_CONST(arg=2, lineno=223)
          92	COMPARE_OP(arg=3, lineno=223)
          94	POP_JUMP_IF_FALSE(arg=104, lineno=223)
          96	LOAD_FAST(arg=6, lineno=225)
          98	LOAD_FAST(arg=3, lineno=225)
         100	LOAD_FAST(arg=5, lineno=225)
         102	STORE_SUBSCR(arg=None, lineno=225)
>        104	LOAD_FAST(arg=4, lineno=226)
         106	LOAD_CONST(arg=2, lineno=226)
         108	INPLACE_ADD(arg=None, lineno=226)
         110	STORE_FAST(arg=4, lineno=226)
         112	LOAD_FAST(arg=5, lineno=227)
         114	LOAD_CONST(arg=2, lineno=227)
         116	INPLACE_ADD(arg=None, lineno=227)
         118	STORE_FAST(arg=5, lineno=227)
         120	JUMP_ABSOLUTE(arg=28, lineno=227)
>        122	POP_BLOCK(arg=None, lineno=227)
>        124	LOAD_FAST(arg=5, lineno=228)
         126	RETURN_VALUE(arg=None, lineno=228)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=205)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=205)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=2, lineno=205)
stack ['$src_ndim2.0']
dispatch pc=6, inst=COMPARE_OP(arg=4, lineno=205)
stack ['$src_ndim2.0', '$dest_ndim4.1']
dispatch pc=8, inst=POP_JUMP_IF_FALSE(arg=14, lineno=205)
stack ['$6compare_op.2']
end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
stack: []
dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=208)
stack []
dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=208)
stack ['$const10.0']
end state. edges=[]
pending: deque([State(pc_initial=14 nstack_initial=0)])
stack: []
dispatch pc=14, inst=LOAD_CONST(arg=1, lineno=210)
stack []
dispatch pc=16, inst=STORE_FAST(arg=4, lineno=210)
stack ['$const14.0']
dispatch pc=18, inst=LOAD_FAST(arg=2, lineno=211)
stack []
dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=211)
stack ['$dest_ndim18.1']
dispatch pc=22, inst=BINARY_SUBTRACT(arg=None, lineno=211)
stack ['$dest_ndim18.1', '$src_ndim20.2']
dispatch pc=24, inst=STORE_FAST(arg=5, lineno=211)
stack ['$22binary_subtract.3']
end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=26 nstack_initial=0)])
stack: []
dispatch pc=26, inst=SETUP_LOOP(arg=96, lineno=212)
stack []
end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=28 nstack_initial=0)])
stack: []
dispatch pc=28, inst=LOAD_FAST(arg=4, lineno=212)
stack []
dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=212)
stack ['$src_index28.0']
dispatch pc=32, inst=COMPARE_OP(arg=0, lineno=212)
stack ['$src_index28.0', '$src_ndim30.1']
dispatch pc=34, inst=POP_JUMP_IF_FALSE(arg=122, lineno=212)
stack ['$32compare_op.2']
end state. edges=[Edge(pc=36, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=36 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
stack: []
dispatch pc=36, inst=LOAD_FAST(arg=1, lineno=213)
stack []
dispatch pc=38, inst=LOAD_FAST(arg=4, lineno=213)
stack ['$src_shape36.0']
dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=213)
stack ['$src_shape36.0', '$src_index38.1']
dispatch pc=42, inst=STORE_FAST(arg=6, lineno=213)
stack ['$40binary_subscr.2']
dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=214)
stack []
dispatch pc=46, inst=LOAD_FAST(arg=5, lineno=214)
stack ['$dest_shape44.3']
dispatch pc=48, inst=BINARY_SUBSCR(arg=None, lineno=214)
stack ['$dest_shape44.3', '$dest_index46.4']
dispatch pc=50, inst=STORE_FAST(arg=7, lineno=214)
stack ['$48binary_subscr.5']
dispatch pc=52, inst=LOAD_FAST(arg=7, lineno=217)
stack []
dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=217)
stack ['$dest_dim_size52.6']
dispatch pc=56, inst=COMPARE_OP(arg=3, lineno=217)
stack ['$dest_dim_size52.6', '$const54.7']
dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=88, lineno=217)
stack ['$56compare_op.8']
end state. edges=[Edge(pc=60, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=88, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0)])
stack: []
dispatch pc=122, inst=POP_BLOCK(arg=None, lineno=227)
stack []
end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0)])
stack: []
dispatch pc=60, inst=LOAD_FAST(arg=6, lineno=221)
stack []
dispatch pc=62, inst=LOAD_FAST(arg=7, lineno=221)
stack ['$src_dim_size60.0']
dispatch pc=64, inst=COMPARE_OP(arg=3, lineno=221)
stack ['$src_dim_size60.0', '$dest_dim_size62.1']
dispatch pc=66, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
stack ['$64compare_op.2']
end state. edges=[Edge(pc=68, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
stack: []
dispatch pc=88, inst=LOAD_FAST(arg=6, lineno=223)
stack []
dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=223)
stack ['$src_dim_size88.0']
dispatch pc=92, inst=COMPARE_OP(arg=3, lineno=223)
stack ['$src_dim_size88.0', '$const90.1']
dispatch pc=94, inst=POP_JUMP_IF_FALSE(arg=104, lineno=223)
stack ['$92compare_op.2']
end state. edges=[Edge(pc=96, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
stack: []
dispatch pc=124, inst=LOAD_FAST(arg=5, lineno=228)
stack []
dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=228)
stack ['$dest_index124.0']
end state. edges=[]
pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
stack: []
dispatch pc=68, inst=LOAD_FAST(arg=6, lineno=221)
stack []
dispatch pc=70, inst=LOAD_CONST(arg=2, lineno=221)
stack ['$src_dim_size68.0']
dispatch pc=72, inst=COMPARE_OP(arg=3, lineno=221)
stack ['$src_dim_size68.0', '$const70.1']
dispatch pc=74, inst=POP_JUMP_IF_FALSE(arg=104, lineno=221)
stack ['$72compare_op.2']
end state. edges=[Edge(pc=76, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
stack: []
dispatch pc=104, inst=LOAD_FAST(arg=4, lineno=226)
stack []
dispatch pc=106, inst=LOAD_CONST(arg=2, lineno=226)
stack ['$src_index104.0']
dispatch pc=108, inst=INPLACE_ADD(arg=None, lineno=226)
stack ['$src_index104.0', '$const106.1']
dispatch pc=110, inst=STORE_FAST(arg=4, lineno=226)
stack ['$108inplace_add.2']
dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=227)
stack []
dispatch pc=114, inst=LOAD_CONST(arg=2, lineno=227)
stack ['$dest_index112.3']
dispatch pc=116, inst=INPLACE_ADD(arg=None, lineno=227)
stack ['$dest_index112.3', '$const114.4']
dispatch pc=118, inst=STORE_FAST(arg=5, lineno=227)
stack ['$116inplace_add.5']
dispatch pc=120, inst=JUMP_ABSOLUTE(arg=28, lineno=227)
stack []
end state. edges=[Edge(pc=28, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=96 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0)])
stack: []
dispatch pc=96, inst=LOAD_FAST(arg=6, lineno=225)
stack []
dispatch pc=98, inst=LOAD_FAST(arg=3, lineno=225)
stack ['$src_dim_size96.0']
dispatch pc=100, inst=LOAD_FAST(arg=5, lineno=225)
stack ['$src_dim_size96.0', '$dest_shape98.1']
dispatch pc=102, inst=STORE_SUBSCR(arg=None, lineno=225)
stack ['$src_dim_size96.0', '$dest_shape98.1', '$dest_index100.2']
end state. edges=[Edge(pc=104, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
stack: []
dispatch pc=76, inst=LOAD_FAST(arg=5, lineno=222)
stack []
dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=222)
stack ['$dest_index76.0']
dispatch pc=80, inst=BINARY_ADD(arg=None, lineno=222)
stack ['$dest_index76.0', '$const78.1']
dispatch pc=82, inst=UNARY_NEGATIVE(arg=None, lineno=222)
stack ['$80binary_add.2']
dispatch pc=84, inst=RETURN_VALUE(arg=None, lineno=222)
stack ['$82unary_negative.3']
end state. edges=[]
pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=104 nstack_initial=0)])
pending: deque([State(pc_initial=104 nstack_initial=0)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=36 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=124 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$src_ndim2.0'}), (4, {'res': '$dest_ndim4.1'}), (6, {'lhs': '$src_ndim2.0', 'rhs': '$dest_ndim4.1', 'res': '$6compare_op.2'}), (8, {'pred': '$6compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$const10.0'}), (12, {'retval': '$const10.0', 'castval': '$12return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$const14.0'}), (16, {'value': '$const14.0'}), (18, {'res': '$dest_ndim18.1'}), (20, {'res': '$src_ndim20.2'}), (22, {'lhs': '$dest_ndim18.1', 'rhs': '$src_ndim20.2', 'res': '$22binary_subtract.3'}), (24, {'value': '$22binary_subtract.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: ()})
block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ()})
block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'res': '$src_index28.0'}), (30, {'res': '$src_ndim30.1'}), (32, {'lhs': '$src_index28.0', 'rhs': '$src_ndim30.1', 'res': '$32compare_op.2'}), (34, {'pred': '$32compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={36: (), 122: ()})
block_infos State(pc_initial=36 nstack_initial=0):
AdaptBlockInfo(insts=((36, {'res': '$src_shape36.0'}), (38, {'res': '$src_index38.1'}), (40, {'index': '$src_index38.1', 'target': '$src_shape36.0', 'res': '$40binary_subscr.2'}), (42, {'value': '$40binary_subscr.2'}), (44, {'res': '$dest_shape44.3'}), (46, {'res': '$dest_index46.4'}), (48, {'index': '$dest_index46.4', 'target': '$dest_shape44.3', 'res': '$48binary_subscr.5'}), (50, {'value': '$48binary_subscr.5'}), (52, {'res': '$dest_dim_size52.6'}), (54, {'res': '$const54.7'}), (56, {'lhs': '$dest_dim_size52.6', 'rhs': '$const54.7', 'res': '$56compare_op.8'}), (58, {'pred': '$56compare_op.8'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={60: (), 88: ()})
block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$src_dim_size60.0'}), (62, {'res': '$dest_dim_size62.1'}), (64, {'lhs': '$src_dim_size60.0', 'rhs': '$dest_dim_size62.1', 'res': '$64compare_op.2'}), (66, {'pred': '$64compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={68: (), 104: ()})
block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$src_dim_size68.0'}), (70, {'res': '$const70.1'}), (72, {'lhs': '$src_dim_size68.0', 'rhs': '$const70.1', 'res': '$72compare_op.2'}), (74, {'pred': '$72compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={76: (), 104: ()})
block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$dest_index76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$dest_index76.0', 'rhs': '$const78.1', 'res': '$80binary_add.2'}), (82, {'value': '$80binary_add.2', 'res': '$82unary_negative.3'}), (84, {'retval': '$82unary_negative.3', 'castval': '$84return_value.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'res': '$src_dim_size88.0'}), (90, {'res': '$const90.1'}), (92, {'lhs': '$src_dim_size88.0', 'rhs': '$const90.1', 'res': '$92compare_op.2'}), (94, {'pred': '$92compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={96: (), 104: ()})
block_infos State(pc_initial=96 nstack_initial=0):
AdaptBlockInfo(insts=((96, {'res': '$src_dim_size96.0'}), (98, {'res': '$dest_shape98.1'}), (100, {'res': '$dest_index100.2'}), (102, {'target': '$dest_shape98.1', 'index': '$dest_index100.2', 'value': '$src_dim_size96.0'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={104: ()})
block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$src_index104.0'}), (106, {'res': '$const106.1'}), (108, {'lhs': '$src_index104.0', 'rhs': '$const106.1', 'res': '$108inplace_add.2'}), (110, {'value': '$108inplace_add.2'}), (112, {'res': '$dest_index112.3'}), (114, {'res': '$const114.4'}), (116, {'lhs': '$dest_index112.3', 'rhs': '$const114.4', 'res': '$116inplace_add.5'}), (118, {'value': '$116inplace_add.5'}), (120, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ()})
block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 124, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={124: ()})
block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$dest_index124.0'}), (126, {'retval': '$dest_index124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    src_ndim = arg(0, name=src_ndim)         ['src_ndim']
    src_shape = arg(1, name=src_shape)       ['src_shape']
    dest_ndim = arg(2, name=dest_ndim)       ['dest_ndim']
    dest_shape = arg(3, name=dest_shape)     ['dest_shape']
    $6compare_op.2 = src_ndim > dest_ndim    ['$6compare_op.2', 'dest_ndim', 'src_ndim']
    bool8 = global(bool: <class 'bool'>)     ['bool8']
    $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None) ['$6compare_op.2', '$8pred', 'bool8']
    branch $8pred, 10, 14                    ['$8pred']
label 10:
    $const10.0 = const(int, 0)               ['$const10.0']
    $12return_value.1 = cast(value=$const10.0) ['$12return_value.1', '$const10.0']
    return $12return_value.1                 ['$12return_value.1']
label 14:
    src_index = const(int, 0)                ['src_index']
    dest_index = dest_ndim - src_ndim        ['dest_index', 'dest_ndim', 'src_ndim']
    jump 26                                  []
label 26:
    jump 28                                  []
label 28:
    $32compare_op.2 = src_index < src_ndim   ['$32compare_op.2', 'src_index', 'src_ndim']
    bool34 = global(bool: <class 'bool'>)    ['bool34']
    $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None) ['$32compare_op.2', '$34pred', 'bool34']
    branch $34pred, 36, 122                  ['$34pred']
label 36:
    src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>) ['src_dim_size', 'src_index', 'src_shape']
    dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>) ['dest_dim_size', 'dest_index', 'dest_shape']
    $const54.7 = const(int, 1)               ['$const54.7']
    $56compare_op.8 = dest_dim_size != $const54.7 ['$56compare_op.8', '$const54.7', 'dest_dim_size']
    bool58 = global(bool: <class 'bool'>)    ['bool58']
    $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None) ['$56compare_op.8', '$58pred', 'bool58']
    branch $58pred, 60, 88                   ['$58pred']
label 60:
    $64compare_op.2 = src_dim_size != dest_dim_size ['$64compare_op.2', 'dest_dim_size', 'src_dim_size']
    bool66 = global(bool: <class 'bool'>)    ['bool66']
    $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$64compare_op.2', '$66pred', 'bool66']
    branch $66pred, 68, 104                  ['$66pred']
label 68:
    $const70.1 = const(int, 1)               ['$const70.1']
    $72compare_op.2 = src_dim_size != $const70.1 ['$72compare_op.2', '$const70.1', 'src_dim_size']
    bool74 = global(bool: <class 'bool'>)    ['bool74']
    $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None) ['$72compare_op.2', '$74pred', 'bool74']
    branch $74pred, 76, 104                  ['$74pred']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80binary_add.2 = dest_index + $const78.1 ['$80binary_add.2', '$const78.1', 'dest_index']
    $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2) ['$80binary_add.2', '$82unary_negative.3']
    $84return_value.4 = cast(value=$82unary_negative.3) ['$82unary_negative.3', '$84return_value.4']
    return $84return_value.4                 ['$84return_value.4']
label 88:
    $const90.1 = const(int, 1)               ['$const90.1']
    $92compare_op.2 = src_dim_size != $const90.1 ['$92compare_op.2', '$const90.1', 'src_dim_size']
    bool94 = global(bool: <class 'bool'>)    ['bool94']
    $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None) ['$92compare_op.2', '$94pred', 'bool94']
    branch $94pred, 96, 104                  ['$94pred']
label 96:
    dest_shape[dest_index] = src_dim_size    ['dest_index', 'dest_shape', 'src_dim_size']
    jump 104                                 []
label 104:
    $const106.1 = const(int, 1)              ['$const106.1']
    $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined) ['$108inplace_add.2', '$const106.1', 'src_index']
    src_index = $108inplace_add.2            ['$108inplace_add.2', 'src_index']
    $const114.4 = const(int, 1)              ['$const114.4']
    $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined) ['$116inplace_add.5', '$const114.4', 'dest_index']
    dest_index = $116inplace_add.5           ['$116inplace_add.5', 'dest_index']
    jump 28                                  []
label 122:
    jump 124                                 []
label 124:
    $126return_value.1 = cast(value=dest_index) ['$126return_value.1', 'dest_index']
    return $126return_value.1                ['$126return_value.1']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: src_ndim = arg(0, name=src_ndim)
on stmt: src_shape = arg(1, name=src_shape)
on stmt: dest_ndim = arg(2, name=dest_ndim)
on stmt: dest_shape = arg(3, name=dest_shape)
on stmt: $6compare_op.2 = src_ndim > dest_ndim
on stmt: bool8 = global(bool: <class 'bool'>)
on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
on stmt: branch $8pred, 10, 14
==== SSA block analysis pass on 10
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $const10.0 = const(int, 0)
on stmt: $12return_value.1 = cast(value=$const10.0)
on stmt: return $12return_value.1
==== SSA block analysis pass on 14
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: src_index = const(int, 0)
on stmt: dest_index = dest_ndim - src_ndim
on stmt: jump 26
==== SSA block analysis pass on 26
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: jump 28
==== SSA block analysis pass on 28
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $32compare_op.2 = src_index < src_ndim
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 122
==== SSA block analysis pass on 36
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
on stmt: $const54.7 = const(int, 1)
on stmt: $56compare_op.8 = dest_dim_size != $const54.7
on stmt: bool58 = global(bool: <class 'bool'>)
on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
on stmt: branch $58pred, 60, 88
==== SSA block analysis pass on 60
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
on stmt: bool66 = global(bool: <class 'bool'>)
on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $66pred, 68, 104
==== SSA block analysis pass on 68
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $const70.1 = const(int, 1)
on stmt: $72compare_op.2 = src_dim_size != $const70.1
on stmt: bool74 = global(bool: <class 'bool'>)
on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $74pred, 76, 104
==== SSA block analysis pass on 76
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $const78.1 = const(int, 1)
on stmt: $80binary_add.2 = dest_index + $const78.1
on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
on stmt: return $84return_value.4
==== SSA block analysis pass on 88
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = src_dim_size != $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 104
==== SSA block analysis pass on 96
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: dest_shape[dest_index] = src_dim_size
on stmt: jump 104
==== SSA block analysis pass on 104
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $const106.1 = const(int, 1)
on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
on stmt: src_index = $108inplace_add.2
on stmt: $const114.4 = const(int, 1)
on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
on stmt: dest_index = $116inplace_add.5
on stmt: jump 28
==== SSA block analysis pass on 122
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: jump 124
==== SSA block analysis pass on 124
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344ba9b10>
on stmt: $126return_value.1 = cast(value=dest_index)
on stmt: return $126return_value.1
defs defaultdict(<class 'list'>,
            {'$108inplace_add.2': [<numba.core.ir.Assign object at 0x7fa344b541d0>],
             '$116inplace_add.5': [<numba.core.ir.Assign object at 0x7fa344b54550>],
             '$126return_value.1': [<numba.core.ir.Assign object at 0x7fa344b548d0>],
             '$12return_value.1': [<numba.core.ir.Assign object at 0x7fa344bb2110>],
             '$32compare_op.2': [<numba.core.ir.Assign object at 0x7fa344bf9490>],
             '$34pred': [<numba.core.ir.Assign object at 0x7fa344c35490>],
             '$56compare_op.8': [<numba.core.ir.Assign object at 0x7fa344b42a50>],
             '$58pred': [<numba.core.ir.Assign object at 0x7fa344b42810>],
             '$64compare_op.2': [<numba.core.ir.Assign object at 0x7fa344b42110>],
             '$66pred': [<numba.core.ir.Assign object at 0x7fa344b42c10>],
             '$6compare_op.2': [<numba.core.ir.Assign object at 0x7fa344bb25d0>],
             '$72compare_op.2': [<numba.core.ir.Assign object at 0x7fa344b42f10>],
             '$74pred': [<numba.core.ir.Assign object at 0x7fa344b52190>],
             '$80binary_add.2': [<numba.core.ir.Assign object at 0x7fa344b52550>],
             '$82unary_negative.3': [<numba.core.ir.Assign object at 0x7fa344b52650>],
             '$84return_value.4': [<numba.core.ir.Assign object at 0x7fa344b52750>],
             '$8pred': [<numba.core.ir.Assign object at 0x7fa344bb2350>],
             '$92compare_op.2': [<numba.core.ir.Assign object at 0x7fa344b52ad0>],
             '$94pred': [<numba.core.ir.Assign object at 0x7fa344b3ebd0>],
             '$const10.0': [<numba.core.ir.Assign object at 0x7fa344bb2410>],
             '$const106.1': [<numba.core.ir.Assign object at 0x7fa344b54090>],
             '$const114.4': [<numba.core.ir.Assign object at 0x7fa344b54450>],
             '$const54.7': [<numba.core.ir.Assign object at 0x7fa344b42310>],
             '$const70.1': [<numba.core.ir.Assign object at 0x7fa344b42e10>],
             '$const78.1': [<numba.core.ir.Assign object at 0x7fa344b52410>],
             '$const90.1': [<numba.core.ir.Assign object at 0x7fa344b529d0>],
             'bool34': [<numba.core.ir.Assign object at 0x7fa344bcc390>],
             'bool58': [<numba.core.ir.Assign object at 0x7fa344b42910>],
             'bool66': [<numba.core.ir.Assign object at 0x7fa344b42b10>],
             'bool74': [<numba.core.ir.Assign object at 0x7fa344b52090>],
             'bool8': [<numba.core.ir.Assign object at 0x7fa344bb2e50>],
             'bool94': [<numba.core.ir.Assign object at 0x7fa344b52c10>],
             'dest_dim_size': [<numba.core.ir.Assign object at 0x7fa344b42550>],
             'dest_index': [<numba.core.ir.Assign object at 0x7fa344b998d0>,
                            <numba.core.ir.Assign object at 0x7fa344b54250>],
             'dest_ndim': [<numba.core.ir.Assign object at 0x7fa344bb2b50>],
             'dest_shape': [<numba.core.ir.Assign object at 0x7fa344bb2490>],
             'src_dim_size': [<numba.core.ir.Assign object at 0x7fa344c728d0>],
             'src_index': [<numba.core.ir.Assign object at 0x7fa344bae190>,
                           <numba.core.ir.Assign object at 0x7fa344b424d0>],
             'src_ndim': [<numba.core.ir.Assign object at 0x7fa344bb2d50>],
             'src_shape': [<numba.core.ir.Assign object at 0x7fa344bb2c50>]})
SSA violators {'src_index', 'dest_index'}
Fix SSA violator on var src_index
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: src_ndim = arg(0, name=src_ndim)
on stmt: src_shape = arg(1, name=src_shape)
on stmt: dest_ndim = arg(2, name=dest_ndim)
on stmt: dest_shape = arg(3, name=dest_shape)
on stmt: $6compare_op.2 = src_ndim > dest_ndim
on stmt: bool8 = global(bool: <class 'bool'>)
on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
on stmt: branch $8pred, 10, 14
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $const10.0 = const(int, 0)
on stmt: $12return_value.1 = cast(value=$const10.0)
on stmt: return $12return_value.1
==== SSA block rewrite pass on 14
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: src_index = const(int, 0)
first assign: src_index
replaced with: src_index = const(int, 0)
on stmt: dest_index = dest_ndim - src_ndim
on stmt: jump 26
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: jump 28
==== SSA block rewrite pass on 28
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $32compare_op.2 = src_index < src_ndim
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 122
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
on stmt: $const54.7 = const(int, 1)
on stmt: $56compare_op.8 = dest_dim_size != $const54.7
on stmt: bool58 = global(bool: <class 'bool'>)
on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
on stmt: branch $58pred, 60, 88
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
on stmt: bool66 = global(bool: <class 'bool'>)
on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $66pred, 68, 104
==== SSA block rewrite pass on 68
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $const70.1 = const(int, 1)
on stmt: $72compare_op.2 = src_dim_size != $const70.1
on stmt: bool74 = global(bool: <class 'bool'>)
on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $74pred, 76, 104
==== SSA block rewrite pass on 76
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $const78.1 = const(int, 1)
on stmt: $80binary_add.2 = dest_index + $const78.1
on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
on stmt: return $84return_value.4
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = src_dim_size != $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 104
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: dest_shape[dest_index] = src_dim_size
on stmt: jump 104
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $const106.1 = const(int, 1)
on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
on stmt: src_index = $108inplace_add.2
replaced with: src_index.1 = $108inplace_add.2
on stmt: $const114.4 = const(int, 1)
on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
on stmt: dest_index = $116inplace_add.5
on stmt: jump 28
==== SSA block rewrite pass on 122
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: jump 124
==== SSA block rewrite pass on 124
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344bb28d0>
on stmt: $126return_value.1 = cast(value=dest_index)
on stmt: return $126return_value.1
Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa344b3ed10>],
             104: [<numba.core.ir.Assign object at 0x7fa344b54d50>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: src_ndim = arg(0, name=src_ndim)
on stmt: src_shape = arg(1, name=src_shape)
on stmt: dest_ndim = arg(2, name=dest_ndim)
on stmt: dest_shape = arg(3, name=dest_shape)
on stmt: $6compare_op.2 = src_ndim > dest_ndim
on stmt: bool8 = global(bool: <class 'bool'>)
on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
on stmt: branch $8pred, 10, 14
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const10.0 = const(int, 0)
on stmt: $12return_value.1 = cast(value=$const10.0)
on stmt: return $12return_value.1
==== SSA block rewrite pass on 14
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: src_index = const(int, 0)
on stmt: dest_index = dest_ndim - src_ndim
on stmt: jump 26
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: jump 28
==== SSA block rewrite pass on 28
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $32compare_op.2 = src_index < src_ndim
find_def var='src_index' stmt=$32compare_op.2 = src_index < src_ndim
find_def_from_top label 28
insert phi node src_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
find_def_from_bottom label 104
incoming_def src_index.1 = $108inplace_add.2
find_def_from_bottom label 26
find_def_from_top label 26
idom 14 from label 26
find_def_from_bottom label 14
incoming_def src_index = const(int, 0)
replaced with: $32compare_op.2 = src_index.2 < src_ndim
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 122
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
find_def var='src_index' stmt=src_dim_size = getitem(value=src_shape, index=src_index, fn=<built-in function getitem>)
find_def_from_top label 36
idom 28 from label 36
find_def_from_bottom label 28
replaced with: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
on stmt: $const54.7 = const(int, 1)
on stmt: $56compare_op.8 = dest_dim_size != $const54.7
on stmt: bool58 = global(bool: <class 'bool'>)
on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
on stmt: branch $58pred, 60, 88
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
on stmt: bool66 = global(bool: <class 'bool'>)
on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $66pred, 68, 104
==== SSA block rewrite pass on 68
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const70.1 = const(int, 1)
on stmt: $72compare_op.2 = src_dim_size != $const70.1
on stmt: bool74 = global(bool: <class 'bool'>)
on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $74pred, 76, 104
==== SSA block rewrite pass on 76
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const78.1 = const(int, 1)
on stmt: $80binary_add.2 = dest_index + $const78.1
on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
on stmt: return $84return_value.4
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = src_dim_size != $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 104
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: dest_shape[dest_index] = src_dim_size
on stmt: jump 104
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const106.1 = const(int, 1)
on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
find_def var='src_index' stmt=$108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
find_def_from_top label 104
idom 36 from label 104
find_def_from_bottom label 36
find_def_from_top label 36
idom 28 from label 36
find_def_from_bottom label 28
replaced with: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
on stmt: src_index.1 = $108inplace_add.2
on stmt: $const114.4 = const(int, 1)
on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
on stmt: dest_index = $116inplace_add.5
on stmt: jump 28
==== SSA block rewrite pass on 122
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: jump 124
==== SSA block rewrite pass on 124
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $126return_value.1 = cast(value=dest_index)
on stmt: return $126return_value.1
Fix SSA violator on var dest_index
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: src_ndim = arg(0, name=src_ndim)
on stmt: src_shape = arg(1, name=src_shape)
on stmt: dest_ndim = arg(2, name=dest_ndim)
on stmt: dest_shape = arg(3, name=dest_shape)
on stmt: $6compare_op.2 = src_ndim > dest_ndim
on stmt: bool8 = global(bool: <class 'bool'>)
on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
on stmt: branch $8pred, 10, 14
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: $const10.0 = const(int, 0)
on stmt: $12return_value.1 = cast(value=$const10.0)
on stmt: return $12return_value.1
==== SSA block rewrite pass on 14
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: src_index = const(int, 0)
on stmt: dest_index = dest_ndim - src_ndim
first assign: dest_index
replaced with: dest_index = dest_ndim - src_ndim
on stmt: jump 26
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: jump 28
==== SSA block rewrite pass on 28
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
on stmt: $32compare_op.2 = src_index.2 < src_ndim
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 122
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
on stmt: $const54.7 = const(int, 1)
on stmt: $56compare_op.8 = dest_dim_size != $const54.7
on stmt: bool58 = global(bool: <class 'bool'>)
on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
on stmt: branch $58pred, 60, 88
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
on stmt: bool66 = global(bool: <class 'bool'>)
on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $66pred, 68, 104
==== SSA block rewrite pass on 68
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: $const70.1 = const(int, 1)
on stmt: $72compare_op.2 = src_dim_size != $const70.1
on stmt: bool74 = global(bool: <class 'bool'>)
on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $74pred, 76, 104
==== SSA block rewrite pass on 76
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: $const78.1 = const(int, 1)
on stmt: $80binary_add.2 = dest_index + $const78.1
on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
on stmt: return $84return_value.4
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = src_dim_size != $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 104
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: dest_shape[dest_index] = src_dim_size
on stmt: jump 104
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: $const106.1 = const(int, 1)
on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
on stmt: src_index.1 = $108inplace_add.2
on stmt: $const114.4 = const(int, 1)
on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
on stmt: dest_index = $116inplace_add.5
replaced with: dest_index.1 = $116inplace_add.5
on stmt: jump 28
==== SSA block rewrite pass on 122
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: jump 124
==== SSA block rewrite pass on 124
Running <numba.core.ssa._FreshVarHandler object at 0x7fa344b54dd0>
on stmt: $126return_value.1 = cast(value=dest_index)
on stmt: return $126return_value.1
Replaced assignments: defaultdict(<class 'list'>,
            {14: [<numba.core.ir.Assign object at 0x7fa344ba2090>],
             104: [<numba.core.ir.Assign object at 0x7fa344b588d0>]})
==== SSA block rewrite pass on 0
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: src_ndim = arg(0, name=src_ndim)
on stmt: src_shape = arg(1, name=src_shape)
on stmt: dest_ndim = arg(2, name=dest_ndim)
on stmt: dest_shape = arg(3, name=dest_shape)
on stmt: $6compare_op.2 = src_ndim > dest_ndim
on stmt: bool8 = global(bool: <class 'bool'>)
on stmt: $8pred = call bool8($6compare_op.2, func=bool8, args=(Var($6compare_op.2, npyimpl.py:205),), kws=(), vararg=None, target=None)
on stmt: branch $8pred, 10, 14
==== SSA block rewrite pass on 10
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const10.0 = const(int, 0)
on stmt: $12return_value.1 = cast(value=$const10.0)
on stmt: return $12return_value.1
==== SSA block rewrite pass on 14
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: src_index = const(int, 0)
on stmt: dest_index = dest_ndim - src_ndim
on stmt: jump 26
==== SSA block rewrite pass on 26
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: jump 28
==== SSA block rewrite pass on 28
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: src_index.2 = phi(incoming_values=[Var(src_index.1, npyimpl.py:226), Var(src_index, npyimpl.py:210)], incoming_blocks=[104, 26])
on stmt: $32compare_op.2 = src_index.2 < src_ndim
on stmt: bool34 = global(bool: <class 'bool'>)
on stmt: $34pred = call bool34($32compare_op.2, func=bool34, args=(Var($32compare_op.2, npyimpl.py:212),), kws=(), vararg=None, target=None)
on stmt: branch $34pred, 36, 122
==== SSA block rewrite pass on 36
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: src_dim_size = getitem(value=src_shape, index=src_index.2, fn=<built-in function getitem>)
on stmt: dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
find_def var='dest_index' stmt=dest_dim_size = getitem(value=dest_shape, index=dest_index, fn=<built-in function getitem>)
find_def_from_top label 36
idom 28 from label 36
find_def_from_bottom label 28
find_def_from_top label 28
insert phi node dest_index.2 = phi(incoming_values=[], incoming_blocks=[]) at 28
find_def_from_bottom label 104
incoming_def dest_index.1 = $116inplace_add.5
find_def_from_bottom label 26
find_def_from_top label 26
idom 14 from label 26
find_def_from_bottom label 14
incoming_def dest_index = dest_ndim - src_ndim
replaced with: dest_dim_size = getitem(value=dest_shape, index=dest_index.2, fn=<built-in function getitem>)
on stmt: $const54.7 = const(int, 1)
on stmt: $56compare_op.8 = dest_dim_size != $const54.7
on stmt: bool58 = global(bool: <class 'bool'>)
on stmt: $58pred = call bool58($56compare_op.8, func=bool58, args=(Var($56compare_op.8, npyimpl.py:217),), kws=(), vararg=None, target=None)
on stmt: branch $58pred, 60, 88
==== SSA block rewrite pass on 60
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $64compare_op.2 = src_dim_size != dest_dim_size
on stmt: bool66 = global(bool: <class 'bool'>)
on stmt: $66pred = call bool66($64compare_op.2, func=bool66, args=(Var($64compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $66pred, 68, 104
==== SSA block rewrite pass on 68
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const70.1 = const(int, 1)
on stmt: $72compare_op.2 = src_dim_size != $const70.1
on stmt: bool74 = global(bool: <class 'bool'>)
on stmt: $74pred = call bool74($72compare_op.2, func=bool74, args=(Var($72compare_op.2, npyimpl.py:221),), kws=(), vararg=None, target=None)
on stmt: branch $74pred, 76, 104
==== SSA block rewrite pass on 76
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const78.1 = const(int, 1)
on stmt: $80binary_add.2 = dest_index + $const78.1
find_def var='dest_index' stmt=$80binary_add.2 = dest_index + $const78.1
find_def_from_top label 76
idom 68 from label 76
find_def_from_bottom label 68
find_def_from_top label 68
idom 60 from label 68
find_def_from_bottom label 60
find_def_from_top label 60
idom 36 from label 60
find_def_from_bottom label 36
find_def_from_top label 36
idom 28 from label 36
find_def_from_bottom label 28
replaced with: $80binary_add.2 = dest_index.2 + $const78.1
on stmt: $82unary_negative.3 = unary(fn=<built-in function neg>, value=$80binary_add.2)
on stmt: $84return_value.4 = cast(value=$82unary_negative.3)
on stmt: return $84return_value.4
==== SSA block rewrite pass on 88
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const90.1 = const(int, 1)
on stmt: $92compare_op.2 = src_dim_size != $const90.1
on stmt: bool94 = global(bool: <class 'bool'>)
on stmt: $94pred = call bool94($92compare_op.2, func=bool94, args=(Var($92compare_op.2, npyimpl.py:223),), kws=(), vararg=None, target=None)
on stmt: branch $94pred, 96, 104
==== SSA block rewrite pass on 96
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: dest_shape[dest_index] = src_dim_size
find_def var='dest_index' stmt=dest_shape[dest_index] = src_dim_size
find_def_from_top label 96
idom 88 from label 96
find_def_from_bottom label 88
find_def_from_top label 88
idom 36 from label 88
find_def_from_bottom label 36
find_def_from_top label 36
idom 28 from label 36
find_def_from_bottom label 28
replaced with: dest_shape[dest_index.2] = src_dim_size
on stmt: jump 104
==== SSA block rewrite pass on 104
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $const106.1 = const(int, 1)
on stmt: $108inplace_add.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=src_index.2, rhs=$const106.1, static_lhs=Undefined, static_rhs=Undefined)
on stmt: src_index.1 = $108inplace_add.2
on stmt: $const114.4 = const(int, 1)
on stmt: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
find_def var='dest_index' stmt=$116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
find_def_from_top label 104
idom 36 from label 104
find_def_from_bottom label 36
find_def_from_top label 36
idom 28 from label 36
find_def_from_bottom label 28
replaced with: $116inplace_add.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=dest_index.2, rhs=$const114.4, static_lhs=Undefined, static_rhs=Undefined)
on stmt: dest_index.1 = $116inplace_add.5
on stmt: jump 28
==== SSA block rewrite pass on 122
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: jump 124
==== SSA block rewrite pass on 124
Running <numba.core.ssa._FixSSAVars object at 0x7fa344bb28d0>
on stmt: $126return_value.1 = cast(value=dest_index)
find_def var='dest_index' stmt=$126return_value.1 = cast(value=dest_index)
find_def_from_top label 124
idom 122 from label 124
find_def_from_bottom label 122
find_def_from_top label 122
idom 28 from label 122
find_def_from_bottom label 28
replaced with: $126return_value.1 = cast(value=dest_index.2)
on stmt: return $126return_value.1
bytecode dump:
>          0	NOP(arg=None, lineno=2641)
           2	LOAD_DEREF(arg=0, lineno=2641)
           4	LOAD_FAST(arg=0, lineno=2641)
           6	LOAD_FAST(arg=1, lineno=2641)
           8	LOAD_FAST(arg=2, lineno=2641)
          10	CALL_FUNCTION(arg=3, lineno=2641)
          12	RETURN_VALUE(arg=None, lineno=2641)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=2641)
stack []
dispatch pc=2, inst=LOAD_DEREF(arg=0, lineno=2641)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2641)
stack ['$2load_deref.0']
dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2641)
stack ['$2load_deref.0', '$a4.1']
dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=2641)
stack ['$2load_deref.0', '$a4.1', '$b6.2']
dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=2641)
stack ['$2load_deref.0', '$a4.1', '$b6.2', '$out8.3']
dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=2641)
stack ['$10call_function.4']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$a4.1'}), (6, {'res': '$b6.2'}), (8, {'res': '$out8.3'}), (10, {'func': '$2load_deref.0', 'args': ['$a4.1', '$b6.2', '$out8.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $2load_deref.0 = freevar(impl: <function outer_impl_none at 0x7fa34540c950>) ['$2load_deref.0']
    $10call_function.4 = call $2load_deref.0(a, b, out, func=$2load_deref.0, args=[Var(a, linalg.py:2641), Var(b, linalg.py:2641), Var(out, linalg.py:2641)], kws=(), vararg=None, target=None) ['$10call_function.4', '$2load_deref.0', 'a', 'b', 'out']
    $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344a63690>
on stmt: a = arg(0, name=a)
on stmt: b = arg(1, name=b)
on stmt: out = arg(2, name=out)
on stmt: $2load_deref.0 = freevar(impl: <function outer_impl_none at 0x7fa34540c950>)
on stmt: $10call_function.4 = call $2load_deref.0(a, b, out, func=$2load_deref.0, args=[Var(a, linalg.py:2641), Var(b, linalg.py:2641), Var(out, linalg.py:2641)], kws=(), vararg=None, target=None)
on stmt: $12return_value.5 = cast(value=$10call_function.4)
on stmt: return $12return_value.5
defs defaultdict(<class 'list'>,
            {'$10call_function.4': [<numba.core.ir.Assign object at 0x7fa344a6c0d0>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa344a6c1d0>],
             '$2load_deref.0': [<numba.core.ir.Assign object at 0x7fa344a67cd0>],
             'a': [<numba.core.ir.Assign object at 0x7fa344a67990>],
             'b': [<numba.core.ir.Assign object at 0x7fa344a67a10>],
             'out': [<numba.core.ir.Assign object at 0x7fa344a67b50>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=2609)
           2	LOAD_GLOBAL(arg=0, lineno=2609)
           4	LOAD_METHOD(arg=1, lineno=2609)
           6	LOAD_FAST(arg=0, lineno=2609)
           8	CALL_METHOD(arg=1, lineno=2609)
          10	STORE_FAST(arg=3, lineno=2609)
          12	LOAD_GLOBAL(arg=0, lineno=2610)
          14	LOAD_METHOD(arg=1, lineno=2610)
          16	LOAD_FAST(arg=1, lineno=2610)
          18	CALL_METHOD(arg=1, lineno=2610)
          20	STORE_FAST(arg=4, lineno=2610)
          22	LOAD_GLOBAL(arg=0, lineno=2611)
          24	LOAD_METHOD(arg=2, lineno=2611)
          26	LOAD_FAST(arg=3, lineno=2611)
          28	LOAD_METHOD(arg=3, lineno=2611)
          30	CALL_METHOD(arg=0, lineno=2611)
          32	LOAD_METHOD(arg=4, lineno=2611)
          34	LOAD_FAST(arg=3, lineno=2611)
          36	LOAD_ATTR(arg=5, lineno=2611)
          38	LOAD_CONST(arg=1, lineno=2611)
          40	BUILD_TUPLE(arg=2, lineno=2611)
          42	CALL_METHOD(arg=1, lineno=2611)
          44	LOAD_FAST(arg=4, lineno=2612)
          46	LOAD_METHOD(arg=3, lineno=2612)
          48	CALL_METHOD(arg=0, lineno=2612)
          50	LOAD_METHOD(arg=4, lineno=2612)
          52	LOAD_CONST(arg=1, lineno=2612)
          54	LOAD_FAST(arg=4, lineno=2612)
          56	LOAD_ATTR(arg=5, lineno=2612)
          58	BUILD_TUPLE(arg=2, lineno=2612)
          60	CALL_METHOD(arg=1, lineno=2612)
          62	CALL_METHOD(arg=2, lineno=2612)
          64	RETURN_VALUE(arg=None, lineno=2612)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=2609)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=2609)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=2609)
stack ['$2load_global.0']
dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=2609)
stack ['$4load_method.1']
dispatch pc=8, inst=CALL_METHOD(arg=1, lineno=2609)
stack ['$4load_method.1', '$a6.2']
dispatch pc=10, inst=STORE_FAST(arg=3, lineno=2609)
stack ['$8call_method.3']
dispatch pc=12, inst=LOAD_GLOBAL(arg=0, lineno=2610)
stack []
dispatch pc=14, inst=LOAD_METHOD(arg=1, lineno=2610)
stack ['$12load_global.4']
dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=2610)
stack ['$14load_method.5']
dispatch pc=18, inst=CALL_METHOD(arg=1, lineno=2610)
stack ['$14load_method.5', '$b16.6']
dispatch pc=20, inst=STORE_FAST(arg=4, lineno=2610)
stack ['$18call_method.7']
dispatch pc=22, inst=LOAD_GLOBAL(arg=0, lineno=2611)
stack []
dispatch pc=24, inst=LOAD_METHOD(arg=2, lineno=2611)
stack ['$22load_global.8']
dispatch pc=26, inst=LOAD_FAST(arg=3, lineno=2611)
stack ['$24load_method.9']
dispatch pc=28, inst=LOAD_METHOD(arg=3, lineno=2611)
stack ['$24load_method.9', '$aa26.10']
dispatch pc=30, inst=CALL_METHOD(arg=0, lineno=2611)
stack ['$24load_method.9', '$28load_method.11']
dispatch pc=32, inst=LOAD_METHOD(arg=4, lineno=2611)
stack ['$24load_method.9', '$30call_method.12']
dispatch pc=34, inst=LOAD_FAST(arg=3, lineno=2611)
stack ['$24load_method.9', '$32load_method.13']
dispatch pc=36, inst=LOAD_ATTR(arg=5, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$aa34.14']
dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$36load_attr.15']
dispatch pc=40, inst=BUILD_TUPLE(arg=2, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$36load_attr.15', '$const38.16']
dispatch pc=42, inst=CALL_METHOD(arg=1, lineno=2611)
stack ['$24load_method.9', '$32load_method.13', '$40build_tuple.17']
dispatch pc=44, inst=LOAD_FAST(arg=4, lineno=2612)
stack ['$24load_method.9', '$42call_method.18']
dispatch pc=46, inst=LOAD_METHOD(arg=3, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$bb44.19']
dispatch pc=48, inst=CALL_METHOD(arg=0, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$46load_method.20']
dispatch pc=50, inst=LOAD_METHOD(arg=4, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$48call_method.21']
dispatch pc=52, inst=LOAD_CONST(arg=1, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22']
dispatch pc=54, inst=LOAD_FAST(arg=4, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$const52.23']
dispatch pc=56, inst=LOAD_ATTR(arg=5, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$const52.23', '$bb54.24']
dispatch pc=58, inst=BUILD_TUPLE(arg=2, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$const52.23', '$56load_attr.25']
dispatch pc=60, inst=CALL_METHOD(arg=1, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$50load_method.22', '$58build_tuple.26']
dispatch pc=62, inst=CALL_METHOD(arg=2, lineno=2612)
stack ['$24load_method.9', '$42call_method.18', '$60call_method.27']
dispatch pc=64, inst=RETURN_VALUE(arg=None, lineno=2612)
stack ['$62call_method.28']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$a6.2'}), (8, {'func': '$4load_method.1', 'args': ['$a6.2'], 'res': '$8call_method.3'}), (10, {'value': '$8call_method.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_method.5'}), (16, {'res': '$b16.6'}), (18, {'func': '$14load_method.5', 'args': ['$b16.6'], 'res': '$18call_method.7'}), (20, {'value': '$18call_method.7'}), (22, {'res': '$22load_global.8'}), (24, {'item': '$22load_global.8', 'res': '$24load_method.9'}), (26, {'res': '$aa26.10'}), (28, {'item': '$aa26.10', 'res': '$28load_method.11'}), (30, {'func': '$28load_method.11', 'args': [], 'res': '$30call_method.12'}), (32, {'item': '$30call_method.12', 'res': '$32load_method.13'}), (34, {'res': '$aa34.14'}), (36, {'item': '$aa34.14', 'res': '$36load_attr.15'}), (38, {'res': '$const38.16'}), (40, {'items': ['$36load_attr.15', '$const38.16'], 'res': '$40build_tuple.17'}), (42, {'func': '$32load_method.13', 'args': ['$40build_tuple.17'], 'res': '$42call_method.18'}), (44, {'res': '$bb44.19'}), (46, {'item': '$bb44.19', 'res': '$46load_method.20'}), (48, {'func': '$46load_method.20', 'args': [], 'res': '$48call_method.21'}), (50, {'item': '$48call_method.21', 'res': '$50load_method.22'}), (52, {'res': '$const52.23'}), (54, {'res': '$bb54.24'}), (56, {'item': '$bb54.24', 'res': '$56load_attr.25'}), (58, {'items': ['$const52.23', '$56load_attr.25'], 'res': '$58build_tuple.26'}), (60, {'func': '$50load_method.22', 'args': ['$58build_tuple.26'], 'res': '$60call_method.27'}), (62, {'func': '$24load_method.9', 'args': ['$42call_method.18', '$60call_method.27'], 'res': '$62call_method.28'}), (64, {'retval': '$62call_method.28', 'castval': '$64return_value.29'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    out = arg(2, name=out)                   ['out']
    $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=asarray) ['$2load_global.0', '$4load_method.1']
    aa = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:2609)], kws=(), vararg=None, target=None) ['$4load_method.1', 'a', 'aa']
    $12load_global.4 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$12load_global.4']
    $14load_method.5 = getattr(value=$12load_global.4, attr=asarray) ['$12load_global.4', '$14load_method.5']
    bb = call $14load_method.5(b, func=$14load_method.5, args=[Var(b, linalg.py:2609)], kws=(), vararg=None, target=None) ['$14load_method.5', 'b', 'bb']
    $22load_global.8 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$22load_global.8']
    $24load_method.9 = getattr(value=$22load_global.8, attr=multiply) ['$22load_global.8', '$24load_method.9']
    $28load_method.11 = getattr(value=aa, attr=ravel) ['$28load_method.11', 'aa']
    $30call_method.12 = call $28load_method.11(func=$28load_method.11, args=[], kws=(), vararg=None, target=None) ['$28load_method.11', '$30call_method.12']
    $32load_method.13 = getattr(value=$30call_method.12, attr=reshape) ['$30call_method.12', '$32load_method.13']
    $36load_attr.15 = getattr(value=aa, attr=size) ['$36load_attr.15', 'aa']
    $const38.16 = const(int, 1)              ['$const38.16']
    $40build_tuple.17 = build_tuple(items=[Var($36load_attr.15, linalg.py:2611), Var($const38.16, linalg.py:2611)]) ['$36load_attr.15', '$40build_tuple.17', '$const38.16']
    $42call_method.18 = call $32load_method.13($40build_tuple.17, func=$32load_method.13, args=[Var($40build_tuple.17, linalg.py:2611)], kws=(), vararg=None, target=None) ['$32load_method.13', '$40build_tuple.17', '$42call_method.18']
    $46load_method.20 = getattr(value=bb, attr=ravel) ['$46load_method.20', 'bb']
    $48call_method.21 = call $46load_method.20(func=$46load_method.20, args=[], kws=(), vararg=None, target=None) ['$46load_method.20', '$48call_method.21']
    $50load_method.22 = getattr(value=$48call_method.21, attr=reshape) ['$48call_method.21', '$50load_method.22']
    $const52.23 = const(int, 1)              ['$const52.23']
    $56load_attr.25 = getattr(value=bb, attr=size) ['$56load_attr.25', 'bb']
    $58build_tuple.26 = build_tuple(items=[Var($const52.23, linalg.py:2612), Var($56load_attr.25, linalg.py:2612)]) ['$56load_attr.25', '$58build_tuple.26', '$const52.23']
    $60call_method.27 = call $50load_method.22($58build_tuple.26, func=$50load_method.22, args=[Var($58build_tuple.26, linalg.py:2612)], kws=(), vararg=None, target=None) ['$50load_method.22', '$58build_tuple.26', '$60call_method.27']
    $62call_method.28 = call $24load_method.9($42call_method.18, $60call_method.27, func=$24load_method.9, args=[Var($42call_method.18, linalg.py:2611), Var($60call_method.27, linalg.py:2612)], kws=(), vararg=None, target=None) ['$24load_method.9', '$42call_method.18', '$60call_method.27', '$62call_method.28']
    $64return_value.29 = cast(value=$62call_method.28) ['$62call_method.28', '$64return_value.29']
    return $64return_value.29                ['$64return_value.29']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344a9e890>
on stmt: a = arg(0, name=a)
on stmt: b = arg(1, name=b)
on stmt: out = arg(2, name=out)
on stmt: $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=asarray)
on stmt: aa = call $4load_method.1(a, func=$4load_method.1, args=[Var(a, linalg.py:2609)], kws=(), vararg=None, target=None)
on stmt: $12load_global.4 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $14load_method.5 = getattr(value=$12load_global.4, attr=asarray)
on stmt: bb = call $14load_method.5(b, func=$14load_method.5, args=[Var(b, linalg.py:2609)], kws=(), vararg=None, target=None)
on stmt: $22load_global.8 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $24load_method.9 = getattr(value=$22load_global.8, attr=multiply)
on stmt: $28load_method.11 = getattr(value=aa, attr=ravel)
on stmt: $30call_method.12 = call $28load_method.11(func=$28load_method.11, args=[], kws=(), vararg=None, target=None)
on stmt: $32load_method.13 = getattr(value=$30call_method.12, attr=reshape)
on stmt: $36load_attr.15 = getattr(value=aa, attr=size)
on stmt: $const38.16 = const(int, 1)
on stmt: $40build_tuple.17 = build_tuple(items=[Var($36load_attr.15, linalg.py:2611), Var($const38.16, linalg.py:2611)])
on stmt: $42call_method.18 = call $32load_method.13($40build_tuple.17, func=$32load_method.13, args=[Var($40build_tuple.17, linalg.py:2611)], kws=(), vararg=None, target=None)
on stmt: $46load_method.20 = getattr(value=bb, attr=ravel)
on stmt: $48call_method.21 = call $46load_method.20(func=$46load_method.20, args=[], kws=(), vararg=None, target=None)
on stmt: $50load_method.22 = getattr(value=$48call_method.21, attr=reshape)
on stmt: $const52.23 = const(int, 1)
on stmt: $56load_attr.25 = getattr(value=bb, attr=size)
on stmt: $58build_tuple.26 = build_tuple(items=[Var($const52.23, linalg.py:2612), Var($56load_attr.25, linalg.py:2612)])
on stmt: $60call_method.27 = call $50load_method.22($58build_tuple.26, func=$50load_method.22, args=[Var($58build_tuple.26, linalg.py:2612)], kws=(), vararg=None, target=None)
on stmt: $62call_method.28 = call $24load_method.9($42call_method.18, $60call_method.27, func=$24load_method.9, args=[Var($42call_method.18, linalg.py:2611), Var($60call_method.27, linalg.py:2612)], kws=(), vararg=None, target=None)
on stmt: $64return_value.29 = cast(value=$62call_method.28)
on stmt: return $64return_value.29
defs defaultdict(<class 'list'>,
            {'$12load_global.4': [<numba.core.ir.Assign object at 0x7fa344a3ced0>],
             '$14load_method.5': [<numba.core.ir.Assign object at 0x7fa344a3cf50>],
             '$22load_global.8': [<numba.core.ir.Assign object at 0x7fa344a3c2d0>],
             '$24load_method.9': [<numba.core.ir.Assign object at 0x7fa344a3c450>],
             '$28load_method.11': [<numba.core.ir.Assign object at 0x7fa344a3c290>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa344a3ca10>],
             '$30call_method.12': [<numba.core.ir.Assign object at 0x7fa344f76190>],
             '$32load_method.13': [<numba.core.ir.Assign object at 0x7fa344f8e910>],
             '$36load_attr.15': [<numba.core.ir.Assign object at 0x7fa344e10190>],
             '$40build_tuple.17': [<numba.core.ir.Assign object at 0x7fa344eaf0d0>],
             '$42call_method.18': [<numba.core.ir.Assign object at 0x7fa344eaf690>],
             '$46load_method.20': [<numba.core.ir.Assign object at 0x7fa344eaf610>],
             '$48call_method.21': [<numba.core.ir.Assign object at 0x7fa344eafd10>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa344a3cb90>],
             '$50load_method.22': [<numba.core.ir.Assign object at 0x7fa344f88e90>],
             '$56load_attr.25': [<numba.core.ir.Assign object at 0x7fa344f888d0>],
             '$58build_tuple.26': [<numba.core.ir.Assign object at 0x7fa344f547d0>],
             '$60call_method.27': [<numba.core.ir.Assign object at 0x7fa344f54bd0>],
             '$62call_method.28': [<numba.core.ir.Assign object at 0x7fa344a9ed10>],
             '$64return_value.29': [<numba.core.ir.Assign object at 0x7fa344a9ee10>],
             '$const38.16': [<numba.core.ir.Assign object at 0x7fa344eafe10>],
             '$const52.23': [<numba.core.ir.Assign object at 0x7fa344f88410>],
             'a': [<numba.core.ir.Assign object at 0x7fa344a633d0>],
             'aa': [<numba.core.ir.Assign object at 0x7fa344a3cfd0>],
             'b': [<numba.core.ir.Assign object at 0x7fa344a635d0>],
             'bb': [<numba.core.ir.Assign object at 0x7fa344a3c790>],
             'out': [<numba.core.ir.Assign object at 0x7fa344a3c650>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=4208)
           2	LOAD_FAST(arg=0, lineno=4208)
           4	RETURN_VALUE(arg=None, lineno=4208)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=4208)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=4208)
stack []
dispatch pc=4, inst=RETURN_VALUE(arg=None, lineno=4208)
stack ['$a2.0']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$a2.0'}), (4, {'retval': '$a2.0', 'castval': '$4return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    a = arg(0, name=a)                       ['a']
    dtype = arg(1, name=dtype)               ['dtype']
    $4return_value.1 = cast(value=a)         ['$4return_value.1', 'a']
    return $4return_value.1                  ['$4return_value.1']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344a67610>
on stmt: a = arg(0, name=a)
on stmt: dtype = arg(1, name=dtype)
on stmt: $4return_value.1 = cast(value=a)
on stmt: return $4return_value.1
defs defaultdict(<class 'list'>,
            {'$4return_value.1': [<numba.core.ir.Assign object at 0x7fa344b14390>],
             'a': [<numba.core.ir.Assign object at 0x7fa344a9e790>],
             'dtype': [<numba.core.ir.Assign object at 0x7fa344b145d0>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=1768)
           2	LOAD_FAST(arg=0, lineno=1768)
           4	LOAD_METHOD(arg=0, lineno=1768)
           6	LOAD_FAST(arg=0, lineno=1768)
           8	LOAD_ATTR(arg=1, lineno=1768)
          10	CALL_METHOD(arg=1, lineno=1768)
          12	RETURN_VALUE(arg=None, lineno=1768)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=1768)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=1768)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=1768)
stack ['$ary2.0']
dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=1768)
stack ['$4load_method.1']
dispatch pc=8, inst=LOAD_ATTR(arg=1, lineno=1768)
stack ['$4load_method.1', '$ary6.2']
dispatch pc=10, inst=CALL_METHOD(arg=1, lineno=1768)
stack ['$4load_method.1', '$8load_attr.3']
dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=1768)
stack ['$10call_method.4']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$ary2.0'}), (4, {'item': '$ary2.0', 'res': '$4load_method.1'}), (6, {'res': '$ary6.2'}), (8, {'item': '$ary6.2', 'res': '$8load_attr.3'}), (10, {'func': '$4load_method.1', 'args': ['$8load_attr.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    ary = arg(0, name=ary)                   ['ary']
    $4load_method.1 = getattr(value=ary, attr=reshape) ['$4load_method.1', 'ary']
    $8load_attr.3 = getattr(value=ary, attr=size) ['$8load_attr.3', 'ary']
    $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1768)], kws=(), vararg=None, target=None) ['$10call_method.4', '$4load_method.1', '$8load_attr.3']
    $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
    return $12return_value.5                 ['$12return_value.5']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344aa7b10>
on stmt: ary = arg(0, name=ary)
on stmt: $4load_method.1 = getattr(value=ary, attr=reshape)
on stmt: $8load_attr.3 = getattr(value=ary, attr=size)
on stmt: $10call_method.4 = call $4load_method.1($8load_attr.3, func=$4load_method.1, args=[Var($8load_attr.3, arrayobj.py:1768)], kws=(), vararg=None, target=None)
on stmt: $12return_value.5 = cast(value=$10call_method.4)
on stmt: return $12return_value.5
defs defaultdict(<class 'list'>,
            {'$10call_method.4': [<numba.core.ir.Assign object at 0x7fa344aa7490>],
             '$12return_value.5': [<numba.core.ir.Assign object at 0x7fa344aa7550>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa344aa70d0>],
             '$8load_attr.3': [<numba.core.ir.Assign object at 0x7fa344aa72d0>],
             'ary': [<numba.core.ir.Assign object at 0x7fa344aa9dd0>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	LOAD_GLOBAL(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=2611)
           6	LOAD_FAST(arg=1, lineno=2612)
           8	CALL_FUNCTION(arg=2, lineno=2612)
          10	RETURN_VALUE(arg=None, lineno=2612)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=1)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=1)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2611)
stack ['$2load_global.0']
dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=2612)
stack ['$2load_global.0', '$_42call_method_18_14.1']
dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=2612)
stack ['$2load_global.0', '$_42call_method_18_14.1', '$_60call_method_27_16.2']
dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=2612)
stack ['$8call_function.3']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$_42call_method_18_14.1'}), (6, {'res': '$_60call_method_27_16.2'}), (8, {'func': '$2load_global.0', 'args': ['$_42call_method_18_14.1', '$_60call_method_27_16.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    _42call_method_18_1 = arg(0, name=_42call_method_18_1) ['_42call_method_18_1']
    _60call_method_27_1 = arg(1, name=_60call_method_27_1) ['_60call_method_27_1']
    $2load_global.0 = global(__ufunc_or_dufunc_0x7fa38ac9d35: <ufunc 'multiply'>) ['$2load_global.0']
    $8call_function.3 = call $2load_global.0(_42call_method_18_1, _60call_method_27_1, func=$2load_global.0, args=[Var(_42call_method_18_1, linalg.py:1), Var(_60call_method_27_1, linalg.py:1)], kws=(), vararg=None, target=None) ['$2load_global.0', '$8call_function.3', '_42call_method_18_1', '_60call_method_27_1']
    $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
    return $10return_value.4                 ['$10return_value.4']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa344a40e50>
on stmt: _42call_method_18_1 = arg(0, name=_42call_method_18_1)
on stmt: _60call_method_27_1 = arg(1, name=_60call_method_27_1)
on stmt: $2load_global.0 = global(__ufunc_or_dufunc_0x7fa38ac9d35: <ufunc 'multiply'>)
on stmt: $8call_function.3 = call $2load_global.0(_42call_method_18_1, _60call_method_27_1, func=$2load_global.0, args=[Var(_42call_method_18_1, linalg.py:1), Var(_60call_method_27_1, linalg.py:1)], kws=(), vararg=None, target=None)
on stmt: $10return_value.4 = cast(value=$8call_function.3)
on stmt: return $10return_value.4
defs defaultdict(<class 'list'>,
            {'$10return_value.4': [<numba.core.ir.Assign object at 0x7fa344a40350>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa344a40a10>],
             '$8call_function.3': [<numba.core.ir.Assign object at 0x7fa344a40410>],
             '_42call_method_18_1': [<numba.core.ir.Assign object at 0x7fa344a40c90>],
             '_60call_method_27_1': [<numba.core.ir.Assign object at 0x7fa344a40f90>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=19)
           2	LOAD_FAST(arg=0, lineno=19)
           4	LOAD_FAST(arg=1, lineno=19)
           6	BINARY_SUBTRACT(arg=None, lineno=19)
           8	RETURN_VALUE(arg=None, lineno=19)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=19)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=19)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=19)
stack ['$_48call_method_10_12.0']
dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=19)
stack ['$_48call_method_10_12.0', '$_66call_method_19_14.1']
dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=19)
stack ['$6binary_subtract.2']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_48call_method_10_12.0'}), (4, {'res': '$_66call_method_19_14.1'}), (6, {'lhs': '$_48call_method_10_12.0', 'rhs': '$_66call_method_19_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    _48call_method_10_1 = arg(0, name=_48call_method_10_1) ['_48call_method_10_1']
    _66call_method_19_1 = arg(1, name=_66call_method_19_1) ['_66call_method_19_1']
    $6binary_subtract.2 = _48call_method_10_1 - _66call_method_19_1 ['$6binary_subtract.2', '_48call_method_10_1', '_66call_method_19_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa3448b5290>
on stmt: _48call_method_10_1 = arg(0, name=_48call_method_10_1)
on stmt: _66call_method_19_1 = arg(1, name=_66call_method_19_1)
on stmt: $6binary_subtract.2 = _48call_method_10_1 - _66call_method_19_1
on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
on stmt: return $8return_value.3
defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fa34483c690>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa34483c810>],
             '_48call_method_10_1': [<numba.core.ir.Assign object at 0x7fa34483c310>],
             '_66call_method_19_1': [<numba.core.ir.Assign object at 0x7fa34483c390>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=17)
           2	LOAD_GLOBAL(arg=0, lineno=17)
           4	LOAD_METHOD(arg=1, lineno=17)
           6	LOAD_FAST(arg=2, lineno=17)
           8	LOAD_FAST(arg=3, lineno=17)
          10	LOAD_FAST(arg=3, lineno=17)
          12	BUILD_TUPLE(arg=3, lineno=17)
          14	CALL_METHOD(arg=1, lineno=17)
          16	STORE_FAST(arg=4, lineno=17)
          18	SETUP_LOOP(arg=60, lineno=18)
          20	LOAD_GLOBAL(arg=2, lineno=18)
          22	LOAD_FAST(arg=2, lineno=18)
          24	CALL_FUNCTION(arg=1, lineno=18)
          26	GET_ITER(arg=None, lineno=18)
>         28	FOR_ITER(arg=48, lineno=18)
          30	STORE_FAST(arg=5, lineno=18)
          32	LOAD_GLOBAL(arg=0, lineno=19)
          34	LOAD_METHOD(arg=3, lineno=19)
          36	LOAD_FAST(arg=0, lineno=19)
          38	LOAD_FAST(arg=5, lineno=19)
          40	BINARY_SUBSCR(arg=None, lineno=19)
          42	LOAD_FAST(arg=0, lineno=19)
          44	LOAD_FAST(arg=5, lineno=19)
          46	BINARY_SUBSCR(arg=None, lineno=19)
          48	CALL_METHOD(arg=2, lineno=19)
          50	LOAD_GLOBAL(arg=0, lineno=19)
          52	LOAD_METHOD(arg=3, lineno=19)
          54	LOAD_FAST(arg=1, lineno=19)
          56	LOAD_FAST(arg=5, lineno=19)
          58	BINARY_SUBSCR(arg=None, lineno=19)
          60	LOAD_FAST(arg=1, lineno=19)
          62	LOAD_FAST(arg=5, lineno=19)
          64	BINARY_SUBSCR(arg=None, lineno=19)
          66	CALL_METHOD(arg=2, lineno=19)
          68	BINARY_SUBTRACT(arg=None, lineno=19)
          70	LOAD_FAST(arg=4, lineno=19)
          72	LOAD_FAST(arg=5, lineno=19)
          74	STORE_SUBSCR(arg=None, lineno=19)
          76	JUMP_ABSOLUTE(arg=28, lineno=19)
>         78	POP_BLOCK(arg=None, lineno=19)
>         80	LOAD_FAST(arg=4, lineno=20)
          82	RETURN_VALUE(arg=None, lineno=20)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=17)
stack []
dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=17)
stack []
dispatch pc=4, inst=LOAD_METHOD(arg=1, lineno=17)
stack ['$2load_global.0']
dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=17)
stack ['$4load_method.1']
dispatch pc=8, inst=LOAD_FAST(arg=3, lineno=17)
stack ['$4load_method.1', '$n_samples6.2']
dispatch pc=10, inst=LOAD_FAST(arg=3, lineno=17)
stack ['$4load_method.1', '$n_samples6.2', '$image_size8.3']
dispatch pc=12, inst=BUILD_TUPLE(arg=3, lineno=17)
stack ['$4load_method.1', '$n_samples6.2', '$image_size8.3', '$image_size10.4']
dispatch pc=14, inst=CALL_METHOD(arg=1, lineno=17)
stack ['$4load_method.1', '$12build_tuple.5']
dispatch pc=16, inst=STORE_FAST(arg=4, lineno=17)
stack ['$14call_method.6']
end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=18 nstack_initial=0)])
stack: []
dispatch pc=18, inst=SETUP_LOOP(arg=60, lineno=18)
stack []
dispatch pc=20, inst=LOAD_GLOBAL(arg=2, lineno=18)
stack []
dispatch pc=22, inst=LOAD_FAST(arg=2, lineno=18)
stack ['$20load_global.0']
dispatch pc=24, inst=CALL_FUNCTION(arg=1, lineno=18)
stack ['$20load_global.0', '$n_samples22.1']
dispatch pc=26, inst=GET_ITER(arg=None, lineno=18)
stack ['$24call_function.2']
end state. edges=[Edge(pc=28, stack=('$26get_iter.3',), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=28 nstack_initial=1)])
stack: ['$phi28.0']
dispatch pc=28, inst=FOR_ITER(arg=48, lineno=18)
stack ['$phi28.0']
end state. edges=[Edge(pc=78, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=30, stack=('$phi28.0', '$28for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=78 nstack_initial=0), State(pc_initial=30 nstack_initial=2)])
stack: []
dispatch pc=78, inst=POP_BLOCK(arg=None, lineno=19)
stack []
end state. edges=[Edge(pc=80, stack=(), blockstack=(), npush=0)]
pending: deque([State(pc_initial=30 nstack_initial=2), State(pc_initial=80 nstack_initial=0)])
stack: ['$phi30.0', '$phi30.1']
dispatch pc=30, inst=STORE_FAST(arg=5, lineno=18)
stack ['$phi30.0', '$phi30.1']
dispatch pc=32, inst=LOAD_GLOBAL(arg=0, lineno=19)
stack ['$phi30.0']
dispatch pc=34, inst=LOAD_METHOD(arg=3, lineno=19)
stack ['$phi30.0', '$32load_global.2']
dispatch pc=36, inst=LOAD_FAST(arg=0, lineno=19)
stack ['$phi30.0', '$34load_method.3']
dispatch pc=38, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$X_cos36.4']
dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$X_cos36.4', '$i38.5']
dispatch pc=42, inst=LOAD_FAST(arg=0, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6']
dispatch pc=44, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6', '$X_cos42.7']
dispatch pc=46, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6', '$X_cos42.7', '$i44.8']
dispatch pc=48, inst=CALL_METHOD(arg=2, lineno=19)
stack ['$phi30.0', '$34load_method.3', '$40binary_subscr.6', '$46binary_subscr.9']
dispatch pc=50, inst=LOAD_GLOBAL(arg=0, lineno=19)
stack ['$phi30.0', '$48call_method.10']
dispatch pc=52, inst=LOAD_METHOD(arg=3, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$50load_global.11']
dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12']
dispatch pc=56, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$X_sin54.13']
dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$X_sin54.13', '$i56.14']
dispatch pc=60, inst=LOAD_FAST(arg=1, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15']
dispatch pc=62, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15', '$X_sin60.16']
dispatch pc=64, inst=BINARY_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15', '$X_sin60.16', '$i62.17']
dispatch pc=66, inst=CALL_METHOD(arg=2, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$52load_method.12', '$58binary_subscr.15', '$64binary_subscr.18']
dispatch pc=68, inst=BINARY_SUBTRACT(arg=None, lineno=19)
stack ['$phi30.0', '$48call_method.10', '$66call_method.19']
dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=19)
stack ['$phi30.0', '$68binary_subtract.20']
dispatch pc=72, inst=LOAD_FAST(arg=5, lineno=19)
stack ['$phi30.0', '$68binary_subtract.20', '$X_gasf70.21']
dispatch pc=74, inst=STORE_SUBSCR(arg=None, lineno=19)
stack ['$phi30.0', '$68binary_subtract.20', '$X_gasf70.21', '$i72.22']
dispatch pc=76, inst=JUMP_ABSOLUTE(arg=28, lineno=19)
stack ['$phi30.0']
end state. edges=[Edge(pc=28, stack=('$phi30.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
pending: deque([State(pc_initial=80 nstack_initial=0), State(pc_initial=28 nstack_initial=1)])
stack: []
dispatch pc=80, inst=LOAD_FAST(arg=4, lineno=20)
stack []
dispatch pc=82, inst=RETURN_VALUE(arg=None, lineno=20)
stack ['$X_gasf80.0']
end state. edges=[]
pending: deque([State(pc_initial=28 nstack_initial=1)])
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=1): {'$phi28.0'},
             State(pc_initial=30 nstack_initial=2): {'$phi30.1'},
             State(pc_initial=78 nstack_initial=0): set(),
             State(pc_initial=80 nstack_initial=0): set()})
defmap: {'$phi28.0': State(pc_initial=18 nstack_initial=0),
 '$phi30.1': State(pc_initial=28 nstack_initial=1)}
phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0)),
                          ('$phi30.0', State(pc_initial=30 nstack_initial=2))},
             '$phi30.0': {('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0)),
                          ('$phi28.0', State(pc_initial=28 nstack_initial=1))},
             '$phi30.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
changing phismap: defaultdict(<class 'set'>,
            {'$phi28.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.0': {('$26get_iter.3',
                           State(pc_initial=18 nstack_initial=0))},
             '$phi30.1': {('$28for_iter.2',
                           State(pc_initial=28 nstack_initial=1))}})
keep phismap: {'$phi28.0': {('$26get_iter.3', State(pc_initial=18 nstack_initial=0))},
 '$phi30.1': {('$28for_iter.2', State(pc_initial=28 nstack_initial=1))}}
new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=18 nstack_initial=0): {'$phi28.0': '$26get_iter.3'},
             State(pc_initial=28 nstack_initial=1): {'$phi30.1': '$28for_iter.2'}})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_method.1'}), (6, {'res': '$n_samples6.2'}), (8, {'res': '$image_size8.3'}), (10, {'res': '$image_size10.4'}), (12, {'items': ['$n_samples6.2', '$image_size8.3', '$image_size10.4'], 'res': '$12build_tuple.5'}), (14, {'func': '$4load_method.1', 'args': ['$12build_tuple.5'], 'res': '$14call_method.6'}), (16, {'value': '$14call_method.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: ()})
block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((20, {'res': '$20load_global.0'}), (22, {'res': '$n_samples22.1'}), (24, {'func': '$20load_global.0', 'args': ['$n_samples22.1'], 'res': '$24call_function.2'}), (26, {'value': '$24call_function.2', 'res': '$26get_iter.3'})), outgoing_phis={'$phi28.0': '$26get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$26get_iter.3',)})
block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'iterator': '$phi28.0', 'pair': '$28for_iter.1', 'indval': '$28for_iter.2', 'pred': '$28for_iter.3'}),), outgoing_phis={'$phi30.1': '$28for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={78: (), 30: ('$phi28.0', '$28for_iter.2')})
block_infos State(pc_initial=30 nstack_initial=2):
AdaptBlockInfo(insts=((30, {'value': '$phi30.1'}), (32, {'res': '$32load_global.2'}), (34, {'item': '$32load_global.2', 'res': '$34load_method.3'}), (36, {'res': '$X_cos36.4'}), (38, {'res': '$i38.5'}), (40, {'index': '$i38.5', 'target': '$X_cos36.4', 'res': '$40binary_subscr.6'}), (42, {'res': '$X_cos42.7'}), (44, {'res': '$i44.8'}), (46, {'index': '$i44.8', 'target': '$X_cos42.7', 'res': '$46binary_subscr.9'}), (48, {'func': '$34load_method.3', 'args': ['$40binary_subscr.6', '$46binary_subscr.9'], 'res': '$48call_method.10'}), (50, {'res': '$50load_global.11'}), (52, {'item': '$50load_global.11', 'res': '$52load_method.12'}), (54, {'res': '$X_sin54.13'}), (56, {'res': '$i56.14'}), (58, {'index': '$i56.14', 'target': '$X_sin54.13', 'res': '$58binary_subscr.15'}), (60, {'res': '$X_sin60.16'}), (62, {'res': '$i62.17'}), (64, {'index': '$i62.17', 'target': '$X_sin60.16', 'res': '$64binary_subscr.18'}), (66, {'func': '$52load_method.12', 'args': ['$58binary_subscr.15', '$64binary_subscr.18'], 'res': '$66call_method.19'}), (68, {'lhs': '$48call_method.10', 'rhs': '$66call_method.19', 'res': '$68binary_subtract.20'}), (70, {'res': '$X_gasf70.21'}), (72, {'res': '$i72.22'}), (74, {'target': '$X_gasf70.21', 'index': '$i72.22', 'value': '$68binary_subtract.20'}), (76, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={28: ('$phi30.0',)})
block_infos State(pc_initial=78 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 80, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={80: ()})
block_infos State(pc_initial=80 nstack_initial=0):
AdaptBlockInfo(insts=((80, {'res': '$X_gasf80.0'}), (82, {'retval': '$X_gasf80.0', 'castval': '$82return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    X_cos = arg(0, name=X_cos)               ['X_cos']
    X_sin = arg(1, name=X_sin)               ['X_sin']
    n_samples = arg(2, name=n_samples)       ['n_samples']
    image_size = arg(3, name=image_size)     ['image_size']
    $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_method.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_method.1']
    $12build_tuple.5 = build_tuple(items=[Var(n_samples, gaf.py:17), Var(image_size, gaf.py:17), Var(image_size, gaf.py:17)]) ['$12build_tuple.5', 'image_size', 'image_size', 'n_samples']
    X_gasf = call $4load_method.1($12build_tuple.5, func=$4load_method.1, args=[Var($12build_tuple.5, gaf.py:17)], kws=(), vararg=None, target=None) ['$12build_tuple.5', '$4load_method.1', 'X_gasf']
    jump 18                                  []
label 18:
    $20load_global.0 = global(prange: <class 'numba.misc.special.prange'>) ['$20load_global.0']
    $24call_function.2 = call $20load_global.0(n_samples, func=$20load_global.0, args=[Var(n_samples, gaf.py:17)], kws=(), vararg=None, target=None) ['$20load_global.0', '$24call_function.2', 'n_samples']
    $26get_iter.3 = getiter(value=$24call_function.2) ['$24call_function.2', '$26get_iter.3']
    $phi28.0 = $26get_iter.3                 ['$26get_iter.3', '$phi28.0']
    jump 28                                  []
label 28:
    $28for_iter.1 = iternext(value=$phi28.0) ['$28for_iter.1', '$phi28.0']
    $28for_iter.2 = pair_first(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.2']
    $28for_iter.3 = pair_second(value=$28for_iter.1) ['$28for_iter.1', '$28for_iter.3']
    $phi30.1 = $28for_iter.2                 ['$28for_iter.2', '$phi30.1']
    branch $28for_iter.3, 30, 78             ['$28for_iter.3']
label 30:
    i = $phi30.1                             ['$phi30.1', 'i']
    $32load_global.2 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$32load_global.2']
    $34load_method.3 = getattr(value=$32load_global.2, attr=outer) ['$32load_global.2', '$34load_method.3']
    $40binary_subscr.6 = getitem(value=X_cos, index=i, fn=<built-in function getitem>) ['$40binary_subscr.6', 'X_cos', 'i']
    $46binary_subscr.9 = getitem(value=X_cos, index=i, fn=<built-in function getitem>) ['$46binary_subscr.9', 'X_cos', 'i']
    $48call_method.10 = call $34load_method.3($40binary_subscr.6, $46binary_subscr.9, func=$34load_method.3, args=[Var($40binary_subscr.6, gaf.py:19), Var($46binary_subscr.9, gaf.py:19)], kws=(), vararg=None, target=None) ['$34load_method.3', '$40binary_subscr.6', '$46binary_subscr.9', '$48call_method.10']
    $50load_global.11 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>) ['$50load_global.11']
    $52load_method.12 = getattr(value=$50load_global.11, attr=outer) ['$50load_global.11', '$52load_method.12']
    $58binary_subscr.15 = getitem(value=X_sin, index=i, fn=<built-in function getitem>) ['$58binary_subscr.15', 'X_sin', 'i']
    $64binary_subscr.18 = getitem(value=X_sin, index=i, fn=<built-in function getitem>) ['$64binary_subscr.18', 'X_sin', 'i']
    $66call_method.19 = call $52load_method.12($58binary_subscr.15, $64binary_subscr.18, func=$52load_method.12, args=[Var($58binary_subscr.15, gaf.py:19), Var($64binary_subscr.18, gaf.py:19)], kws=(), vararg=None, target=None) ['$52load_method.12', '$58binary_subscr.15', '$64binary_subscr.18', '$66call_method.19']
    $68binary_subtract.20 = $48call_method.10 - $66call_method.19 ['$48call_method.10', '$66call_method.19', '$68binary_subtract.20']
    X_gasf[i] = $68binary_subtract.20        ['$68binary_subtract.20', 'X_gasf', 'i']
    jump 28                                  []
label 78:
    jump 80                                  []
label 80:
    $82return_value.1 = cast(value=X_gasf)   ['$82return_value.1', 'X_gasf']
    return $82return_value.1                 ['$82return_value.1']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa3446f88d0>
on stmt: X_cos = arg(0, name=X_cos)
on stmt: X_sin = arg(1, name=X_sin)
on stmt: n_samples = arg(2, name=n_samples)
on stmt: image_size = arg(3, name=image_size)
on stmt: $2load_global.0 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $4load_method.1 = getattr(value=$2load_global.0, attr=empty)
on stmt: $12build_tuple.5 = build_tuple(items=[Var(n_samples, gaf.py:17), Var(image_size, gaf.py:17), Var(image_size, gaf.py:17)])
on stmt: X_gasf = call $4load_method.1($12build_tuple.5, func=$4load_method.1, args=[Var($12build_tuple.5, gaf.py:17)], kws=(), vararg=None, target=None)
on stmt: jump 18
==== SSA block analysis pass on 18
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa3446f88d0>
on stmt: $20load_global.0 = global(prange: <class 'numba.misc.special.prange'>)
on stmt: $24call_function.2 = call $20load_global.0(n_samples, func=$20load_global.0, args=[Var(n_samples, gaf.py:17)], kws=(), vararg=None, target=None)
on stmt: $26get_iter.3 = getiter(value=$24call_function.2)
on stmt: $phi28.0 = $26get_iter.3
on stmt: jump 28
==== SSA block analysis pass on 28
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa3446f88d0>
on stmt: $28for_iter.1 = iternext(value=$phi28.0)
on stmt: $28for_iter.2 = pair_first(value=$28for_iter.1)
on stmt: $28for_iter.3 = pair_second(value=$28for_iter.1)
on stmt: $phi30.1 = $28for_iter.2
on stmt: branch $28for_iter.3, 30, 78
==== SSA block analysis pass on 30
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa3446f88d0>
on stmt: i = $phi30.1
on stmt: $32load_global.2 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $34load_method.3 = getattr(value=$32load_global.2, attr=outer)
on stmt: $40binary_subscr.6 = getitem(value=X_cos, index=i, fn=<built-in function getitem>)
on stmt: $46binary_subscr.9 = getitem(value=X_cos, index=i, fn=<built-in function getitem>)
on stmt: $48call_method.10 = call $34load_method.3($40binary_subscr.6, $46binary_subscr.9, func=$34load_method.3, args=[Var($40binary_subscr.6, gaf.py:19), Var($46binary_subscr.9, gaf.py:19)], kws=(), vararg=None, target=None)
on stmt: $50load_global.11 = global(np: <module 'numpy' from '/usr/local/lib/python3.7/dist-packages/numpy/__init__.py'>)
on stmt: $52load_method.12 = getattr(value=$50load_global.11, attr=outer)
on stmt: $58binary_subscr.15 = getitem(value=X_sin, index=i, fn=<built-in function getitem>)
on stmt: $64binary_subscr.18 = getitem(value=X_sin, index=i, fn=<built-in function getitem>)
on stmt: $66call_method.19 = call $52load_method.12($58binary_subscr.15, $64binary_subscr.18, func=$52load_method.12, args=[Var($58binary_subscr.15, gaf.py:19), Var($64binary_subscr.18, gaf.py:19)], kws=(), vararg=None, target=None)
on stmt: $68binary_subtract.20 = $48call_method.10 - $66call_method.19
on stmt: X_gasf[i] = $68binary_subtract.20
on stmt: jump 28
==== SSA block analysis pass on 78
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa3446f88d0>
on stmt: jump 80
==== SSA block analysis pass on 80
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa3446f88d0>
on stmt: $82return_value.1 = cast(value=X_gasf)
on stmt: return $82return_value.1
defs defaultdict(<class 'list'>,
            {'$12build_tuple.5': [<numba.core.ir.Assign object at 0x7fa344685a50>],
             '$20load_global.0': [<numba.core.ir.Assign object at 0x7fa344685c90>],
             '$24call_function.2': [<numba.core.ir.Assign object at 0x7fa344685e90>],
             '$26get_iter.3': [<numba.core.ir.Assign object at 0x7fa344685f90>],
             '$28for_iter.1': [<numba.core.ir.Assign object at 0x7fa34468b250>],
             '$28for_iter.2': [<numba.core.ir.Assign object at 0x7fa34468b310>],
             '$28for_iter.3': [<numba.core.ir.Assign object at 0x7fa34468b3d0>],
             '$2load_global.0': [<numba.core.ir.Assign object at 0x7fa344685590>],
             '$32load_global.2': [<numba.core.ir.Assign object at 0x7fa34468b710>],
             '$34load_method.3': [<numba.core.ir.Assign object at 0x7fa34468b810>],
             '$40binary_subscr.6': [<numba.core.ir.Assign object at 0x7fa34500d390>],
             '$46binary_subscr.9': [<numba.core.ir.Assign object at 0x7fa345061650>],
             '$48call_method.10': [<numba.core.ir.Assign object at 0x7fa344b72dd0>],
             '$4load_method.1': [<numba.core.ir.Assign object at 0x7fa344685710>],
             '$50load_global.11': [<numba.core.ir.Assign object at 0x7fa348848590>],
             '$52load_method.12': [<numba.core.ir.Assign object at 0x7fa348848350>],
             '$58binary_subscr.15': [<numba.core.ir.Assign object at 0x7fa344afced0>],
             '$64binary_subscr.18': [<numba.core.ir.Assign object at 0x7fa34468b690>],
             '$66call_method.19': [<numba.core.ir.Assign object at 0x7fa34468b990>],
             '$68binary_subtract.20': [<numba.core.ir.Assign object at 0x7fa34468ba50>],
             '$82return_value.1': [<numba.core.ir.Assign object at 0x7fa34468bd90>],
             '$phi28.0': [<numba.core.ir.Assign object at 0x7fa344685150>],
             '$phi30.1': [<numba.core.ir.Assign object at 0x7fa34468b450>],
             'X_cos': [<numba.core.ir.Assign object at 0x7fa3446854d0>],
             'X_gasf': [<numba.core.ir.Assign object at 0x7fa344685b90>],
             'X_sin': [<numba.core.ir.Assign object at 0x7fa344685550>],
             'i': [<numba.core.ir.Assign object at 0x7fa34468b610>],
             'image_size': [<numba.core.ir.Assign object at 0x7fa344685210>],
             'n_samples': [<numba.core.ir.Assign object at 0x7fa344685290>]})
SSA violators set()
bytecode dump:
>          0	NOP(arg=None, lineno=19)
           2	LOAD_FAST(arg=0, lineno=19)
           4	LOAD_FAST(arg=1, lineno=19)
           6	BINARY_SUBTRACT(arg=None, lineno=19)
           8	RETURN_VALUE(arg=None, lineno=19)
pending: deque([State(pc_initial=0 nstack_initial=0)])
stack: []
dispatch pc=0, inst=NOP(arg=None, lineno=19)
stack []
dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=19)
stack []
dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=19)
stack ['$_48call_method_10_12.0']
dispatch pc=6, inst=BINARY_SUBTRACT(arg=None, lineno=19)
stack ['$_48call_method_10_12.0', '$_66call_method_19_14.1']
dispatch pc=8, inst=RETURN_VALUE(arg=None, lineno=19)
stack ['$6binary_subtract.2']
end state. edges=[]
-------------------------Prune PHIs-------------------------
Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
defmap: {}
phismap: defaultdict(<class 'set'>, {})
changing phismap: defaultdict(<class 'set'>, {})
keep phismap: {}
new_out: defaultdict(<class 'dict'>, {})
----------------------DONE Prune PHIs-----------------------
block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$_48call_method_10_12.0'}), (4, {'res': '$_66call_method_19_14.1'}), (6, {'lhs': '$_48call_method_10_12.0', 'rhs': '$_66call_method_19_14.1', 'res': '$6binary_subtract.2'}), (8, {'retval': '$6binary_subtract.2', 'castval': '$8return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
label 0:
    _48call_method_10_1 = arg(0, name=_48call_method_10_1) ['_48call_method_10_1']
    _66call_method_19_1 = arg(1, name=_66call_method_19_1) ['_66call_method_19_1']
    $6binary_subtract.2 = _48call_method_10_1 - _66call_method_19_1 ['$6binary_subtract.2', '_48call_method_10_1', '_66call_method_19_1']
    $8return_value.3 = cast(value=$6binary_subtract.2) ['$6binary_subtract.2', '$8return_value.3']
    return $8return_value.3                  ['$8return_value.3']

==== SSA block analysis pass on 0
Running <numba.core.ssa._GatherDefsHandler object at 0x7fa34468b5d0>
on stmt: _48call_method_10_1 = arg(0, name=_48call_method_10_1)
on stmt: _66call_method_19_1 = arg(1, name=_66call_method_19_1)
on stmt: $6binary_subtract.2 = _48call_method_10_1 - _66call_method_19_1
on stmt: $8return_value.3 = cast(value=$6binary_subtract.2)
on stmt: return $8return_value.3
defs defaultdict(<class 'list'>,
            {'$6binary_subtract.2': [<numba.core.ir.Assign object at 0x7fa344642f50>],
             '$8return_value.3': [<numba.core.ir.Assign object at 0x7fa344644110>],
             '_48call_method_10_1': [<numba.core.ir.Assign object at 0x7fa344642110>],
             '_66call_method_19_1': [<numba.core.ir.Assign object at 0x7fa344642c90>]})
SSA violators set()
[<mppn.baselines.AvgMetric object at 0x7fa3444cd850>, <mppn.baselines.AvgMetric object at 0x7fa3446822d0>, <mppn.baselines.AvgMetric object at 0x7fa3444d3250>, <mppn.baselines.AvgMetric object at 0x7fa3444e33d0>]
0.8157894611358643
